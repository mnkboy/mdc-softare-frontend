[{"/home/node/aplicacion/mdc-softare-frontend/src/index.js":"1","/home/node/aplicacion/mdc-softare-frontend/src/App.jsx":"2","/home/node/aplicacion/mdc-softare-frontend/src/themeConfig.js":"3","/home/node/aplicacion/mdc-softare-frontend/src/redux/store.js":"4","/home/node/aplicacion/mdc-softare-frontend/src/components/Container.jsx":"5","/home/node/aplicacion/mdc-softare-frontend/src/redux/PersonaActivistaDucks.js":"6","/home/node/aplicacion/mdc-softare-frontend/src/redux/InfoAdicionalCasillasDucks.js":"7","/home/node/aplicacion/mdc-softare-frontend/src/redux/CasillasDucks.js":"8","/home/node/aplicacion/mdc-softare-frontend/src/redux/ReportesRgsDucks.js":"9","/home/node/aplicacion/mdc-softare-frontend/src/redux/VotosHoraDucks.js":"10","/home/node/aplicacion/mdc-softare-frontend/src/redux/LoginDucks.js":"11","/home/node/aplicacion/mdc-softare-frontend/src/redux/EleccionesDucks.js":"12","/home/node/aplicacion/mdc-softare-frontend/src/redux/GraficasGeneroDucks.js":"13","/home/node/aplicacion/mdc-softare-frontend/src/redux/GraficasEdadDucks.js":"14","/home/node/aplicacion/mdc-softare-frontend/src/redux/GraficasSeccionDucks.js":"15","/home/node/aplicacion/mdc-softare-frontend/src/components/Navbar.jsx":"16","/home/node/aplicacion/mdc-softare-frontend/src/components/DrawerCustom.jsx":"17","/home/node/aplicacion/mdc-softare-frontend/src/components/pages/Home.jsx":"18","/home/node/aplicacion/mdc-softare-frontend/src/components/pages/Promovidos.jsx":"19","/home/node/aplicacion/mdc-softare-frontend/src/components/pages/CapturaDeVotos.jsx":"20","/home/node/aplicacion/mdc-softare-frontend/src/components/pages/Graficas.jsx":"21","/home/node/aplicacion/mdc-softare-frontend/src/components/pages/Casillas.jsx":"22","/home/node/aplicacion/mdc-softare-frontend/src/components/pages/GestionarPromovidos.jsx":"23","/home/node/aplicacion/mdc-softare-frontend/src/components/pages/IncidentesCasillas.jsx":"24","/home/node/aplicacion/mdc-softare-frontend/src/components/pages/Elecciones.jsx":"25","/home/node/aplicacion/mdc-softare-frontend/src/components/pages/SignIn.jsx":"26","/home/node/aplicacion/mdc-softare-frontend/src/components/pages/Promovidos/PromovidoDetalle.jsx":"27","/home/node/aplicacion/mdc-softare-frontend/src/components/pages/Casillas/CreateCasilla.jsx":"28","/home/node/aplicacion/mdc-softare-frontend/src/components/pages/Casillas/UpdateCasilla.jsx":"29","/home/node/aplicacion/mdc-softare-frontend/src/components/pages/Elecciones/CreateEleccion.jsx":"30","/home/node/aplicacion/mdc-softare-frontend/src/components/pages/Elecciones/UpdateEleccion.jsx":"31","/home/node/aplicacion/mdc-softare-frontend/src/components/ListIcons.jsx":"32","/home/node/aplicacion/mdc-softare-frontend/src/components/charts/PieChart.jsx":"33","/home/node/aplicacion/mdc-softare-frontend/src/components/utils/MaterialTableCpt.jsx":"34","/home/node/aplicacion/mdc-softare-frontend/src/components/utils/MenuButtonListCpt.jsx":"35","/home/node/aplicacion/mdc-softare-frontend/src/components/utils/DataGridCpt.jsx":"36","/home/node/aplicacion/mdc-softare-frontend/src/components/utils/MaterialTableEditableCpt.jsx":"37","/home/node/aplicacion/mdc-softare-frontend/src/components/charts/PolarChart.jsx":"38","/home/node/aplicacion/mdc-softare-frontend/src/components/charts/MultiAxisChart.jsx":"39","/home/node/aplicacion/mdc-softare-frontend/src/components/charts/HorizontalChart.jsx":"40","/home/node/aplicacion/mdc-softare-frontend/src/components/charts/ComboChart.jsx":"41","/home/node/aplicacion/mdc-softare-frontend/src/components/pages/ReportesRgs.jsx":"42","/home/node/aplicacion/mdc-softare-frontend/src/redux/GraficasPorRolDucks.js":"43","/home/node/aplicacion/mdc-softare-frontend/src/redux/GraficasTotalSeccionDucks.js":"44","/home/node/aplicacion/mdc-softare-frontend/src/redux/GraficasEstructuraDucks.js":"45"},{"size":217,"mtime":1611516282426,"results":"46","hashOfConfig":"47"},{"size":492,"mtime":1617556044541,"results":"48","hashOfConfig":"47"},{"size":311,"mtime":1611550280894,"results":"49","hashOfConfig":"47"},{"size":1671,"mtime":1618381358638,"results":"50","hashOfConfig":"47"},{"size":4488,"mtime":1618164846503,"results":"51","hashOfConfig":"47"},{"size":8482,"mtime":1618086416845,"results":"52","hashOfConfig":"47"},{"size":3696,"mtime":1616986183627,"results":"53","hashOfConfig":"47"},{"size":7841,"mtime":1616036055787,"results":"54","hashOfConfig":"47"},{"size":2157,"mtime":1616036055787,"results":"55","hashOfConfig":"47"},{"size":1172,"mtime":1616987286645,"results":"56","hashOfConfig":"47"},{"size":2154,"mtime":1617770974290,"results":"57","hashOfConfig":"47"},{"size":9314,"mtime":1616036055787,"results":"58","hashOfConfig":"47"},{"size":1566,"mtime":1616988059437,"results":"59","hashOfConfig":"47"},{"size":1550,"mtime":1616988328252,"results":"60","hashOfConfig":"47"},{"size":1574,"mtime":1616988333316,"results":"61","hashOfConfig":"47"},{"size":2990,"mtime":1617476337193,"results":"62","hashOfConfig":"47"},{"size":997,"mtime":1615522578225,"results":"63","hashOfConfig":"47"},{"size":9083,"mtime":1618381997850,"results":"64","hashOfConfig":"47"},{"size":4474,"mtime":1618064234944,"results":"65","hashOfConfig":"47"},{"size":7193,"mtime":1618064234952,"results":"66","hashOfConfig":"47"},{"size":4851,"mtime":1616996497629,"results":"67","hashOfConfig":"47"},{"size":6765,"mtime":1618167716344,"results":"68","hashOfConfig":"47"},{"size":4277,"mtime":1618169277612,"results":"69","hashOfConfig":"47"},{"size":4658,"mtime":1614014471415,"results":"70","hashOfConfig":"47"},{"size":6459,"mtime":1616978283757,"results":"71","hashOfConfig":"47"},{"size":5027,"mtime":1617770970642,"results":"72","hashOfConfig":"47"},{"size":4703,"mtime":1618064234944,"results":"73","hashOfConfig":"47"},{"size":8431,"mtime":1615521914127,"results":"74","hashOfConfig":"47"},{"size":10484,"mtime":1615521914127,"results":"75","hashOfConfig":"47"},{"size":6796,"mtime":1615521914127,"results":"76","hashOfConfig":"47"},{"size":8751,"mtime":1615996898472,"results":"77","hashOfConfig":"47"},{"size":6643,"mtime":1618164856623,"results":"78","hashOfConfig":"47"},{"size":680,"mtime":1616992543224,"results":"79","hashOfConfig":"47"},{"size":2887,"mtime":1618166474978,"results":"80","hashOfConfig":"47"},{"size":1598,"mtime":1616086085665,"results":"81","hashOfConfig":"47"},{"size":1064,"mtime":1616851764490,"results":"82","hashOfConfig":"47"},{"size":4770,"mtime":1618168706124,"results":"83","hashOfConfig":"47"},{"size":716,"mtime":1616996078943,"results":"84","hashOfConfig":"47"},{"size":3714,"mtime":1616995647345,"results":"85","hashOfConfig":"47"},{"size":4004,"mtime":1616996853197,"results":"86","hashOfConfig":"47"},{"size":1311,"mtime":1616996994871,"results":"87","hashOfConfig":"47"},{"size":2266,"mtime":1618164765034,"results":"88","hashOfConfig":"47"},{"size":1612,"mtime":1618381968782,"results":"89","hashOfConfig":"47"},{"size":1674,"mtime":1618381801615,"results":"90","hashOfConfig":"47"},{"size":1675,"mtime":1618381184491,"results":"91","hashOfConfig":"47"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"1wh7eu1",{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"94"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"94"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"94"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"94"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"94"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"94"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"94"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"94"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"94"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"94"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"94"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"94"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"94"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"94"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"94"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"94"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"94"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"94"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"94"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"94"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"94"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"94"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"94"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/node/aplicacion/mdc-softare-frontend/src/index.js",[],["206","207"],"/home/node/aplicacion/mdc-softare-frontend/src/App.jsx",[],"/home/node/aplicacion/mdc-softare-frontend/src/themeConfig.js",[],"/home/node/aplicacion/mdc-softare-frontend/src/redux/store.js",[],"/home/node/aplicacion/mdc-softare-frontend/src/components/Container.jsx",["208","209","210"],"import React, { useState } from 'react'\nimport { makeStyles, Hidden } from '@material-ui/core'\nimport Navbar from './Navbar';\nimport DrawerCustom from './DrawerCustom';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport HomePage from './pages/Home';\nimport Promovidos from './pages/Promovidos';\nimport CapturaDeVotos from './pages/CapturaDeVotos';\nimport Casillas from './pages/Casillas';\nimport Graficas from './pages/Graficas';\nimport IncidentesCasillas from './pages/IncidentesCasillas';\nimport ReportesRgs from './pages/ReportesRgs';\nimport GestionarPromovidos from './pages/GestionarPromovidos';\nimport Elecciones from './pages/Elecciones';\nimport PromovidoDetalle from './pages/Promovidos/PromovidoDetalle';\nimport CreateCasilla from './pages/Casillas/CreateCasilla';\nimport UpdateCasilla from './pages/Casillas/UpdateCasilla';\nimport CreateEleccion from './pages/Elecciones/CreateEleccion';\nimport UpdateEleccion from './pages/Elecciones/UpdateEleccion';\nimport SignIn from './pages/SignIn';\n\nconst styles = makeStyles(theme => ({\n    root: {\n        display: 'flex'\n    },\n    toolbar: theme.mixins.toolbar,\n    content: {\n        flexGrow: 1,\n        backgroundColor: theme.palette.background.default,\n        padding: theme.spacing(3)\n    }\n\n}))\n\nconst Container = () => {\n    const classes = styles()\n    //open y cerrar menu\n    const [open, setOpen] = useState(false)\n    const openAction = () => {\n        setOpen(!open)\n    }\n\n    const imprimeRutas = () => {\n        if (localStorage.getItem(\"token-centinela\") === null) {\n            return (\n                <div>\n                    <Switch>\n                        <Route exact path=\"/\">\n                            <SignIn />\n                        </Route>\n                    </Switch>\n                </div>\n            )\n        }\n        return (\n            <div>\n                <Switch>\n                    <Route exact path=\"/gestionarpromovidos\" >\n                        <GestionarPromovidos />\n                    </Route>\n                    <Route exact path=\"/elecciones\" >\n                        <Elecciones />\n                    </Route>\n                    <Route exact path=\"/elecciones/create\" >\n                        <CreateEleccion />\n                    </Route>\n                    <Route exact path=\"/elecciones/update/:id\" >\n                        <UpdateEleccion />\n                    </Route>\n                    <Route exact path=\"/casillas\" >\n                        <Casillas />\n                    </Route>\n                    <Route exact path=\"/casillas/create\" >\n                        <CreateCasilla />\n                    </Route>\n                    <Route exact path=\"/casillas/update/:id\" >\n                        <UpdateCasilla />\n                    </Route>\n                    <Route exact path=\"/capturavotos\">\n                        <CapturaDeVotos />\n                    </Route>\n                    <Route exact path=\"/promovidos\">\n                        <Promovidos />\n                    </Route>\n                    <Route path=\"/promovidos/get/:id\">\n                        <PromovidoDetalle />\n                    </Route>\n                    <Route exact path=\"/home\">\n                        <HomePage />\n                    </Route>\n                    {/* <Route exact path=\"/graficas\" >\n                        <Graficas />\n                    </Route> */}\n                    {/* <Route exact path=\"/incidentes\" >\n                        <IncidentesCasillas />\n                    </Route> */}\n                    {/* <Route exact path=\"/reportesrgs\" >\n                        <ReportesRgs />\n                    </Route> */}\n                </Switch>\n            </div>\n        )\n    }\n\n    return (\n        <div className={classes.root}>\n            <Router>\n                <Navbar openAction={openAction} />\n                <Hidden xsDown>\n                    <DrawerCustom variant='permanent' open={true} />\n                </Hidden>\n                <Hidden smUp>\n                    <DrawerCustom variant='temporary'\n                        open={open}\n                        onClose={openAction}\n                    />\n                </Hidden>\n                <div className={classes.content}>\n                    <div className={classes.toolbar}>\n                    </div>\n                    {imprimeRutas()}\n                </div>\n            </Router>\n\n        </div>\n    )\n}\n\nexport default Container\n","/home/node/aplicacion/mdc-softare-frontend/src/redux/PersonaActivistaDucks.js",["211","212","213","214"],"//Bilbiotecas\nimport axios from 'axios'\n\n//Variables\nconst dataInicial = {\n\tarray: [],\n\treload: false\n}\n\n//Constantes acciones\nconst RETRIEVE_PERSONA_ACTIVISTA = 'RETRIEVE_PERSONA_ACTIVISTA';\nconst CREATE_PERSONA_ACTIVISTA = 'CREATE_PERSONA_ACTIVISTA';\nconst UPDATE_PERSONA_ACTIVISTA = 'UPDATE_PERSONA_ACTIVISTA';\nconst DELETE_PERSONA_ACTIVISTA = 'DELETE_PERSONA_ACTIVISTA';\nconst UPDATE_VOTO = 'UPDATE_VOTO';\n\n//Reducer\nexport default function modelNameReducer(state = dataInicial, action) {\n\tswitch (action.type) {\n\t\tcase RETRIEVE_PERSONA_ACTIVISTA:\n\t\t\treturn { ...state, array: action.payload, reload: action.reload }\n\t\tcase CREATE_PERSONA_ACTIVISTA:\n\t\t\treturn { ...state, array: action.payload, reload: action.reload }\n\t\tcase UPDATE_PERSONA_ACTIVISTA:\n\t\t\treturn { ...state, array: action.payload, reload: action.reload }\n\t\tcase DELETE_PERSONA_ACTIVISTA:\n\t\t\treturn { ...state, array: action.payload, reload: action.reload }\n\t\tcase UPDATE_VOTO:\n\t\t\treturn { ...state, array: action.payload, reload: action.reload }\n\t\tdefault:\n\t\t\treturn state\n\t}\n}\n//============= Acciones =============\n\n//RETRIEVE\nexport const retrievePersonaActivistaAccion = (model) => async (dispatch, getState) => {\n\t//Definimos query\n\tconst query = `\n        query{\n            findPersonasActivistas(id: \"${model.id}\"){\n                ...PersonaActivista\n                subactivistas{\n                    ...PersonaActivista\n                        subactivistas{\n                            ...PersonaActivista\n                    }        \n                }        \n            }\n        }\n        \n        fragment PersonaActivista on PersonaActivista {\n                id:idpersonaactivista\n                idpuesto\n                idrol\n                idjefe\n                puesto\n                nombre\n                apellidos\n                telefono\n                domicilio\n                seccion\n                ocupacion\n                edad\n                genero\n                claveelector\n                localidad\n                municipio\n                votado\n                horavoto\n            }`;\n\n\n\n\t//Intentamos accion\n\ttry {\n\t\tconst res = await axios.post(`${process.env.REACT_APP_URI_GRAPH_QL}`, {\n\t\t\tquery,\n\t\t},\n\t\t\t{\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': localStorage.getItem(`${process.env.REACT_APP_TOKEN_NAME}`),\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t}\n\t\t\t})\n\t\tdispatch({\n\t\t\ttype: RETRIEVE_PERSONA_ACTIVISTA,\n\t\t\tpayload: res.data.data.findPersonasActivistas,\n\t\t\treload: false,\n\t\t})\n\n\n\t}//Procesamos error si existe\n\tcatch (error) {\n\t\tconsole.log(error)\n\t}\n}\n\n//UPDATE VOTO\nexport const updateVotoAccion = (model) => async (dispatch, getState) => {\n\t//Definimos query\n\tconst query = `\n        mutation {  \n            updatePersonaActivista(input: \n            {\n                idpersonaactivista: \"${model.id}\", votado: ${model.votado}\n              })\n          }`;\n\n\tconst { array } = getState().personasActivistas;\n\n\t//Intentamos accion\n\ttry {\n\t\tconst res = await axios.post(`${process.env.REACT_APP_URI_GRAPH_QL}`, {\n\t\t\tquery,\n\t\t},\n\t\t\t{\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': localStorage.getItem(`${process.env.REACT_APP_TOKEN_NAME}`),\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t}\n\t\t\t})\n\t\tdispatch({\n\t\t\ttype: UPDATE_VOTO,\n\t\t\tpayload: array,\n\t\t\treload: true\n\t\t})\n\n\t}//Procesamos error si existe\n\tcatch (error) {\n\t\tconsole.log(error)\n\t}\n}\n\n//CREATE\nexport const createPersonaActivistaAccion = (model) => async (dispatch, getState) => {\n\t//Definimos query\n\tconst query = `mutation createPersonaActivistaMutation{\n\t\tcreatePersonaActivistaMutation(input: {                \n\t\t\tidpuesto: ${model.idpuesto === \"\" ? null : `\"${model.idpuesto}\"`}\n\t\t\tidrol: ${model.idrol === \"\" ? null : `\"${model.idrol}\"`}\n\t\t\tpuesto: ${model.puesto === \"\" ? null : `\"${model.puesto}\"`}\n\t\t\tnombre: ${model.nombre === \"\" ? null : `\"${model.nombre}\"`}\n\t\t\tapellidos: ${model.apellidos === \"\" ? null : `\"${model.apellidos}\"`}\n\t\t\ttelefono: ${model.telefono === \"\" ? null : `\"${model.telefono}\"`}\n\t\t\tdomicilio: ${model.domicilio === \"\" ? null : `\"${model.domicilio}\"`}\n\t\t\tseccion: ${model.seccion === \"\" ? null : `\"${model.seccion}\"`}\n\t\t\tocupacion: ${model.ocupacion === \"\" ? null : `\"${model.ocupacion}\"`}\n\t\t\tedad: ${model.edad === undefined ? 18 : model.edad}\t\t\t\n\t\t\tgenero: ${model.genero === \"\" ? null : `\"${model.genero}\"`}\n\t\t\tclaveelector: ${model.claveelector === \"\" ? null : `\"${model.claveelector}\"`}\n\t\t\tlocalidad: ${model.localidad === \"\" ? null : `\"${model.localidad}\"`}\n\t\t\tmunicipio: ${model.municipio === \"\" ? \"\" : `\"${model.municipio}\"`}\n\t\t\t}){\n\t\t\t...PersonaActivista        \n\t\t}\n\t}\n\t\n\tfragment PersonaActivista on PersonaActivista {\n\t\t\tidpersonaactivista\n\t\t\tidpuesto\n\t\t\tidrol\n\t\t\tidjefe\n\t\t\tpuesto\n\t\t\tnombre\n\t\t\tapellidos\n\t\t\ttelefono\n\t\t\tdomicilio\n\t\t\tseccion\n\t\t\tocupacion\n\t\t\tedad\n\t\t\tgenero\n\t\t\tclaveelector\n\t\t\tlocalidad\n\t\t\tmunicipio\n\t\t\tvotado\n\t\t\thoravoto    \n\t\t}`;\n\n\n\tconst { array } = getState().personasActivistas;\n\n\t//Intentamos accion\n\ttry {\n\t\tconst res = await axios.post(`${process.env.REACT_APP_URI_GRAPH_QL}`, {\n\t\t\tquery,\n\t\t},\n\t\t\t{\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': localStorage.getItem(`${process.env.REACT_APP_TOKEN_NAME}`),\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t}\n\t\t\t})\n\t\tdispatch({\n\t\t\ttype: CREATE_PERSONA_ACTIVISTA,\n\t\t\tpayload: array,\n\t\t\treload: true\n\t\t})\n\n\t}//Procesamos error si existe\n\tcatch (error) {\n\t\tconsole.log(error)\n\t}\n}\n\n//UPDATE\nexport const updatePersonaActivistaAccion = (model) => async (dispatch, getState) => {\n\t//Definimos query\n\tconst query = `mutation updatePersonaActivistaMutation{\n\t\tupdatePersonaActivistaMutation(input: {                \n\t\t\t\tidpersonaactivista:\"${model.id}\"\n\t\t\t\tidpuesto: ${model.idpuesto === \"\" ? null : `\"${model.idpuesto}\"`}\n\t\t\t\tidrol: ${model.idrol === \"\" ? null : `\"${model.idrol}\"`}\n\t\t\t\tpuesto: ${model.puesto === \"\" ? null : `\"${model.puesto}\"`}\n\t\t\t\tnombre: ${model.nombre === \"\" ? null : `\"${model.nombre}\"`}\n\t\t\t\tapellidos: ${model.apellidos === \"\" ? null : `\"${model.apellidos}\"`}\n\t\t\t\ttelefono: ${model.telefono === \"\" ? null : `\"${model.telefono}\"`}\n\t\t\t\tdomicilio: ${model.domicilio === \"\" ? null : `\"${model.domicilio}\"`}\n\t\t\t\tseccion: ${model.seccion === \"\" ? null : `\"${model.seccion}\"`}\n\t\t\t\tocupacion: ${model.ocupacion === \"\" ? null : `\"${model.ocupacion}\"`}\n\t\t\t\tedad: ${model.edad === undefined ? 18 : model.edad}\t\t\t\n\t\t\t\tgenero: ${model.genero === \"\" ? null : `\"${model.genero}\"`}\n\t\t\t\tclaveelector: ${model.claveelector === \"\" ? null : `\"${model.claveelector}\"`}\n\t\t\t\tlocalidad: ${model.localidad === \"\" ? null : `\"${model.localidad}\"`}\n\t\t\t\tmunicipio: ${model.municipio === \"\" ? \"\" : `\"${model.municipio}\"`}\n\t\t\t}){\n\t\t\t...PersonaActivista        \n\t\t}\n\t}\n\t\n\tfragment PersonaActivista on PersonaActivista {\n\t\t\tidpersonaactivista\n\t\t\tidpuesto\n\t\t\tidrol\n\t\t\tidjefe\n\t\t\tpuesto\n\t\t\tnombre\n\t\t\tapellidos\n\t\t\ttelefono\n\t\t\tdomicilio\n\t\t\tseccion\n\t\t\tocupacion\n\t\t\tedad\n\t\t\tgenero\n\t\t\tclaveelector\n\t\t\tlocalidad\n\t\t\tmunicipio\n\t\t\tvotado\n\t\t\thoravoto    \n\t\t}`;\n\n\n\tconst { array } = getState().personasActivistas;\n\n\t//Intentamos accion\n\ttry {\n\t\tconst res = await axios.post(`${process.env.REACT_APP_URI_GRAPH_QL}`, {\n\t\t\tquery,\n\t\t},\n\t\t\t{\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': localStorage.getItem(`${process.env.REACT_APP_TOKEN_NAME}`),\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t}\n\t\t\t})\n\t\tdispatch({\n\t\t\ttype: UPDATE_PERSONA_ACTIVISTA,\n\t\t\tpayload: array,\n\t\t\treload: true\n\t\t})\n\n\t}//Procesamos error si existe\n\tcatch (error) {\n\t\tconsole.log(error)\n\t}\n}\n\n//DELETE\nexport const deletePersonaActivistaAccion = (model) => async (dispatch, getState) => {\n\t//Definimos query\n\tconst query = `mutation deletePersonaActivistaMutation{\n\t\tdeletePersonaActivistaMutation(input: {                \n\t\t\tidpersonaactivista:\"${model.id}\"\n\t\t\t}){\n\t\t\t...PersonaActivista        \n\t\t}\n\t}\n\t\n\tfragment PersonaActivista on PersonaActivista {\n\t\t\tidpersonaactivista\n\t\t\tidpuesto\n\t\t\tidrol\n\t\t\tidjefe\n\t\t\tpuesto\n\t\t\tnombre\n\t\t\tapellidos\n\t\t\ttelefono\n\t\t\tdomicilio\n\t\t\tseccion\n\t\t\tocupacion\n\t\t\tedad\n\t\t\tgenero\n\t\t\tclaveelector\n\t\t\tlocalidad\n\t\t\tmunicipio\n\t\t\tvotado\n\t\t\thoravoto    \n\t\t}\n\t\n\t`;\n\n\n\tconst { array } = getState().personasActivistas;\n\n\t//Intentamos accion\n\ttry {\n\t\tconst res = await axios.post(`${process.env.REACT_APP_URI_GRAPH_QL}`, {\n\t\t\tquery,\n\t\t},\n\t\t\t{\n\t\t\t\theaders: {\n\t\t\t\t\t'Authorization': localStorage.getItem(`${process.env.REACT_APP_TOKEN_NAME}`),\n\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t}\n\t\t\t})\n\t\tdispatch({\n\t\t\ttype: DELETE_PERSONA_ACTIVISTA,\n\t\t\tpayload: array,\n\t\t\treload: true\n\t\t})\n\n\t}//Procesamos error si existe\n\tcatch (error) {\n\t\tconsole.log(error)\n\t}\n}","/home/node/aplicacion/mdc-softare-frontend/src/redux/InfoAdicionalCasillasDucks.js",[],"/home/node/aplicacion/mdc-softare-frontend/src/redux/CasillasDucks.js",[],"/home/node/aplicacion/mdc-softare-frontend/src/redux/ReportesRgsDucks.js",[],"/home/node/aplicacion/mdc-softare-frontend/src/redux/VotosHoraDucks.js",[],"/home/node/aplicacion/mdc-softare-frontend/src/redux/LoginDucks.js",["215"],"import isofetch from 'isomorphic-fetch'\n\n//constantes\nconst dataInicial = {\n    array: [],\n    reload: false\n}\n//Obtener datos de reportes activista\nconst GET_LOGIN = 'GET_LOGIN';\nconst UPDATE_LOGIN = 'UPDATE_LOGIN';\n\n//reducer \nexport default function loginReducer(state = dataInicial, action) {\n    switch (action.type) {\n        case GET_LOGIN:\n            return { ...state, array: action.payload }\n        case UPDATE_LOGIN:\n            return { ...state, array: action.payload }\n        default:\n            return state\n    }\n}\n\n//acciones\nexport const getLoginAccion = (login) => async (dispatch, getState) => {\n    console.log(login)\n\n    //Intentamos accion\n    try {\n        const query = `\n        mutation login{\n            login(input: {username: \"${login.usuario}\", password: \"${login.password}\"})\n          }`;\n\n\n        isofetch(`${process.env.REACT_APP_URI_GRAPH_QL}`, {\n            method: 'POST',\n            headers: {\n                'Authorization': '',\n                'Content-Type': 'application/json',\n                'QueryName': 'login',\n            },\n            body: JSON.stringify({ query }),\n        })\n            .then(res => res.json())\n            .then((result) => {\n                try {\n                    //Establecemos el token\n                    localStorage.setItem(`${process.env.REACT_APP_TOKEN_NAME}`, result.data.login);\n\n                    //Establecemos en el store del redux las variables\n                    return dispatch({\n                        type: GET_LOGIN,\n                        payload: result.data.login,\n                        reaload: false,\n                    }),\n                        //Recargamos por completo la pagina\n                        window.location.reload();\n                } catch (error) {\n                    console.log(error)\n                }\n            });\n\n    }//Procesamos error si existe\n    catch (error) {\n        console.log(error)\n    }\n}\n\nexport const updateLoginAccion = (setreReload) => async (dispatch, getState) => {\n    //Intentamos accion\n    try {\n\n    }//Procesamos error si existe\n    catch (error) {\n        console.log(error)\n    }\n}","/home/node/aplicacion/mdc-softare-frontend/src/redux/EleccionesDucks.js",[],"/home/node/aplicacion/mdc-softare-frontend/src/redux/GraficasGeneroDucks.js",[],"/home/node/aplicacion/mdc-softare-frontend/src/redux/GraficasEdadDucks.js",[],"/home/node/aplicacion/mdc-softare-frontend/src/redux/GraficasSeccionDucks.js",[],"/home/node/aplicacion/mdc-softare-frontend/src/components/Navbar.jsx",["216"],"import React from 'react'\nimport { AppBar, IconButton, makeStyles, Toolbar, Typography, Button } from '@material-ui/core'\nimport { Menu } from '@material-ui/icons';\nimport { useHistory } from \"react-router-dom\";\n\nconst drawerWidth = 240;\n\nconst styles = makeStyles(theme => ({\n    menuButton: {\n        marginRight: theme.spacing(2),\n        [theme.breakpoints.up('sm')]: {\n            display: 'none',\n        },\n    },\n    title: {\n        flexGrow: 1\n    },\n    appBar: {\n        [theme.breakpoints.up('sm')]: {\n            width: `calc(100% - ${drawerWidth}px)`,\n            margiLeft: drawerWidth\n        }\n    }\n\n}))\n\nconst Navbar = (props) => {\n\n    const classes = styles()\n\n    const history = useHistory();\n\n    //Login\n    const handleLogin = (path) => {\n        history.push(\"/\");\n    };\n\n    //Logout\n    const handleLogout = (path) => {\n        localStorage.removeItem(`${process.env.REACT_APP_TOKEN_NAME}`);\n        history.push(\"/\");\n        window.location.reload();\n    };\n\n    const imprimeLoginLogout = () => {\n        if (localStorage.getItem(\"token-centinela\") === null) {\n            return (\n                <div>\n                    <Button color='inherit' onClick={handleLogin}>Entrar</Button>\n                </div>\n            )\n        }\n        return (\n            <div>\n                <Button color='inherit' onClick={handleLogout}>Salir</Button>\n            </div>\n        )\n    }\n\n    const imprimeNombreBienvenido = () => {\n        if (localStorage.getItem(\"token-centinela\") != null && localStorage.getItem(\"token-centinela\") != \"undefined\") {\n            console.log(localStorage.getItem(\"token-centinela\"))\n            const token = localStorage.getItem(`${process.env.REACT_APP_TOKEN_NAME}`);\n            const base64Url = token.split('.')[1];\n            const decodedValue = JSON.parse(window.atob(base64Url));\n\n            return (\n                <div>\n                    <Typography variant='h6' className={classes.title}>\n                        {decodedValue.name.toLowerCase()}\n                    </Typography>\n                </div>\n            )\n        }\n    }\n\n\n    return (\n        <div>\n            <AppBar className={classes.appBar}>\n                <Toolbar>\n                    <IconButton\n                        className={classes.menuButton}\n                        color='inherit'\n                        onClick={() => props.openAction()}\n                    >\n                        <Menu />\n                    </IconButton>\n                    <img src={\"https://res.cloudinary.com/dti7elyha/image/upload/v1617369536/simbolo-centinela_tx0rms.png\"} alt=\"centinel logo\" width=\"35\" height=\"35\" />\n                    <Typography variant='h6' className={classes.title}>\n                        CENTINELA\n                    </Typography>\n                    {imprimeNombreBienvenido()}\n                    {imprimeLoginLogout()}\n                </Toolbar>\n\n            </AppBar>\n        </div >\n    )\n}\n\nexport default Navbar\n","/home/node/aplicacion/mdc-softare-frontend/src/components/DrawerCustom.jsx",[],"/home/node/aplicacion/mdc-softare-frontend/src/components/pages/Home.jsx",["217","218","219","220","221","222","223","224","225","226","227","228","229","230"],"/home/node/aplicacion/mdc-softare-frontend/src/components/pages/Promovidos.jsx",["231"],"import React, { useEffect } from \"react\";\nimport DataGridCpt from \"../utils/DataGridCpt\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport DoneAllIcon from '@material-ui/icons/DoneAll';\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\nimport { retrievePersonaActivistaAccion, updateVotoAccion } from \"../../redux/PersonaActivistaDucks\";\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\nimport Link from '@material-ui/core/Link';\nimport MenuButtonListCpt from '../utils/MenuButtonListCpt';\n\nconst Promovidos = () => {\n\tconst dispatch = useDispatch();\n\tconst activistas = useSelector((store) => store.personasActivistas.array);\n\tconst reload = useSelector((store) => store.personasActivistas.reload);\n\n\n\t//Nombre modelo\n\tconst modelo = \"promovidos\";\n\n\t//BreadCums\n\tfunction handleClick(event) {\n\t\tevent.preventDefault();\n\t\tconsole.info('You clicked a breadcrumb.');\n\t}\n\n\t//Persona\n\tconst persona = {\n\t\tid: \"\",\n\t\tvotado: 0,\n\t};\n\n\t//Hacemos carga inicial\n\tuseEffect(() => {\n\t\tdispatch(retrievePersonaActivistaAccion(persona));\n\t}, []);\n\n\t//Verificamos si hubo cambios\n\tif (reload) {\n\t\tpersona.id = \"\";\n\t\tdispatch(retrievePersonaActivistaAccion(persona));\n\t}\n\n\t//Realizamos\n\tconst performAction = (id) => {\n\t\thandleVotado(id);\n\t};\n\n\t//Handle votado\n\tconst handleVotado = (thisRow) => {\n\t\tpersona.id = thisRow.id;\n\t\tpersona.votado = thisRow.votado === 1 ? 0 : 1;\n\t\tdispatch(updateVotoAccion(persona));\n\t};\n\n\n\n\t// Columnas\n\tconst columns = [\n\t\t{\n\t\t\tfield: \"id\",\n\t\t\theaderName: \"ID\",\n\t\t\twidth: 180,\n\t\t\thide: true,\n\t\t},\n\t\t{\n\t\t\tfield: \"actions\",\n\t\t\theaderName: \"ACCION\",\n\t\t\twidth: 120,\n\t\t\tdisableClickEventBubbling: true,\n\t\t\trenderCell: (params: CellParams) => {\n\n\t\t\t\tconst api: GridApi = params.api;\n\t\t\t\tconst fields = api\n\t\t\t\t\t.getAllColumns()\n\t\t\t\t\t.map((c) => c.field)\n\t\t\t\t\t.filter((c) => c !== \"__check__\" && !!c);\n\t\t\t\tconst thisRow = {};\n\n\t\t\t\tfields.forEach((f) => {\n\t\t\t\t\tthisRow[f] = params.getValue(f);\n\t\t\t\t});\n\n\t\t\t\tconst acciones = [\n\t\t\t\t\t{\n\t\t\t\t\t\tid: thisRow.id,\n\t\t\t\t\t\taction: \"get\",\n\t\t\t\t\t\ttitle: \"ver\",\n\t\t\t\t\t\thandle: null,\n\t\t\t\t\t\trowdata: thisRow,\n\t\t\t\t\t\tpath: `/${modelo}/get/${thisRow.id}`,\n\t\t\t\t\t},\n\t\t\t\t]\n\t\t\t\treturn <MenuButtonListCpt acciones={acciones} />\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tfield: \"votado\",\n\t\t\theaderName: \"VOTADO\",\n\t\t\twidth: 120,\n\t\t\trenderCell: (params: CellParams) => {\n\t\t\t\tconst onClick = () => {\n\t\t\t\t\tconst api: GridApi = params.api;\n\t\t\t\t\tconst fields = api\n\t\t\t\t\t\t.getAllColumns()\n\t\t\t\t\t\t.map((c) => c.field)\n\t\t\t\t\t\t.filter((c) => c !== \"__check__\" && !!c);\n\t\t\t\t\tconst thisRow = {};\n\n\t\t\t\t\tfields.forEach((f) => {\n\t\t\t\t\t\tthisRow[f] = params.getValue(f);\n\t\t\t\t\t});\n\n\t\t\t\t\tperformAction(thisRow);\n\t\t\t\t};\n\t\t\t\tif (params.value === 1) {\n\t\t\t\t\treturn <DoneAllIcon\n\t\t\t\t\t\tstyle={{ color: '#03a9f4' }}\n\t\t\t\t\t\tonClick={onClick}\n\t\t\t\t\t/>;\n\t\t\t\t} else {\n\t\t\t\t\treturn <RadioButtonUncheckedIcon\n\t\t\t\t\t\tonClick={onClick}\n\t\t\t\t\t/>;\n\t\t\t\t}\n\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tfield: \"nombre\",\n\t\t\theaderName: \"NOMBRE\",\n\t\t\twidth: 200,\n\t\t},\n\t\t{\n\t\t\tfield: \"apellidos\",\n\t\t\theaderName: \"APELLIDOS\",\n\t\t\twidth: 200,\n\t\t},\n\t\t{\n\t\t\tfield: \"telefono\",\n\t\t\theaderName: \"TELEFONO\",\n\t\t\twidth: 180,\n\t\t},\n\t\t{\n\t\t\tfield: \"domicilio\",\n\t\t\theaderName: \"DOMICILIO\",\n\t\t\twidth: 100,\n\t\t},\n\t\t{\n\t\t\tfield: \"seccion\",\n\t\t\theaderName: \"SECCION\",\n\t\t\twidth: 100,\n\t\t},\n\t\t{\n\t\t\tfield: \"ocupacion\",\n\t\t\theaderName: \"OCUPACION\",\n\t\t\twidth: 200,\n\t\t},\n\t\t{\n\t\t\tfield: \"edad\",\n\t\t\theaderName: \"EDAD\",\n\t\t\twidth: 100,\n\t\t},\n\t\t{\n\t\t\tfield: \"genero\",\n\t\t\theaderName: \"GENERO\",\n\t\t\twidth: 100,\n\t\t},\n\t\t{\n\t\t\tfield: \"claveelector\",\n\t\t\theaderName: \"CLAVEELECTOR\",\n\t\t\twidth: 180,\n\t\t},\n\t\t{\n\t\t\tfield: \"localidad\",\n\t\t\theaderName: \"LOCALIDAD\",\n\t\t\twidth: 180,\n\t\t},\n\t\t{\n\t\t\tfield: \"municipio\",\n\t\t\theaderName: \"MUNICIPIO\",\n\t\t\twidth: 180,\n\t\t},\n\t\t{\n\t\t\tfield: \"idpuesto\",\n\t\t\theaderName: \"IDPUESTO\",\n\t\t\twidth: 120,\n\t\t},\n\t\t{\n\t\t\tfield: \"idrol\",\n\t\t\theaderName: \"IDROL\",\n\t\t\twidth: 100,\n\t\t},\n\t\t{\n\t\t\tfield: \"idjefe\",\n\t\t\theaderName: \"IDJEFE\",\n\t\t\twidth: 100,\n\t\t},\n\t\t{\n\t\t\tfield: \"puesto\",\n\t\t\theaderName: \"PUESTO\",\n\t\t\twidth: 150,\n\t\t},\n\t\t// {\n\t\t// \tfield: \"horavoto\",\n\t\t// \theaderName: \"HORAVOTO\",\n\t\t// \twidth: 180,\n\t\t// },\n\n\t];\n\n\treturn (\n\t\t<div>\n\t\t\t<Breadcrumbs aria-label=\"breadcrumb\">\n\t\t\t\t<Link color=\"inherit\" href=\"/home\" >\n\t\t\t\t\tHome\n      \t\t\t</Link>\n\t\t\t\t<Link\n\t\t\t\t\tcolor=\"textPrimary\"\n\t\t\t\t\thref=\"/promovidos\"\n\t\t\t\t\tonClick={handleClick}\n\t\t\t\t\taria-current=\"page\"\n\t\t\t\t>\n\t\t\t\t\tPromovidos\n      \t\t\t</Link>\n\t\t\t</Breadcrumbs><br />\n\t\t\t<DataGridCpt columns={columns} actArray={activistas} reload={reload} />\n\t\t</div>\n\t);\n};\n\nexport default Promovidos;\n","/home/node/aplicacion/mdc-softare-frontend/src/components/pages/CapturaDeVotos.jsx",["232","233","234"],"import React, { useEffect } from \"react\";\nimport DataGridCpt from \"../utils/DataGridCpt\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport DoneAllIcon from '@material-ui/icons/DoneAll';\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\nimport { retrievePersonaActivistaAccion, updateVotoAccion } from \"../../redux/PersonaActivistaDucks\";\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\nimport Link from '@material-ui/core/Link';\nimport MenuButtonListCpt from '../utils/MenuButtonListCpt';\nimport BarChartDemo from '../charts/HorizontalChart';\nimport { ResizableBox } from 'react-resizable';\n\nconst CapturaDeVotos = () => {\n    const dispatch = useDispatch();\n    const activistas = useSelector((store) => store.personasActivistas.array);\n    const reload = useSelector((store) => store.personasActivistas.reload);\n\n    //Nombre modelo\n    const modelo = \"promovidos\";\n\n    //BreadCums\n    function handleClick(event) {\n        event.preventDefault();\n        console.info('You clicked a breadcrumb.');\n    }\n\n    //Persona\n    const persona = {\n        id: \"\",\n        votado: 0,\n    };\n\n    //Hacemos carga inicial\n    useEffect(() => {\n        const token = localStorage.getItem(`${process.env.REACT_APP_TOKEN_NAME}`);\n        const base64Url = token.split('.')[1];\n        const decodedValue = JSON.parse(window.atob(base64Url));\n        persona.id = decodedValue.id_user;\n        dispatch(retrievePersonaActivistaAccion(persona));\n    }, []);\n\n    //Verificamos si hubo cambios\n    if (reload) {\n        const token = localStorage.getItem(`${process.env.REACT_APP_TOKEN_NAME}`);\n        const base64Url = token.split('.')[1];\n        const decodedValue = JSON.parse(window.atob(base64Url));\n        persona.id = decodedValue.id_user;\n        dispatch(retrievePersonaActivistaAccion(persona));\n    }\n\n    //Realizamos\n    const performAction = (id) => {\n        handleVotado(id);\n    };\n\n    //Handle votado\n    const handleVotado = (thisRow) => {\n        persona.id = thisRow.id;\n        persona.votado = thisRow.votado === 1 ? 0 : 1;\n        dispatch(updateVotoAccion(persona));\n    };\n\n    const votados = () => {\n        let suma = 0;\n        activistas.forEach(item =>\n            suma = suma + item.votado,\n        );\n        return suma;\n    }\n\n    // Columnas\n    const columns = [\n        {\n            field: \"id\",\n            headerName: \"ID\",\n            width: 180,\n            hide: true,\n        },\n        // {\n        //     field: \"actions\",\n        //     headerName: \"ACCION\",\n        //     width: 120,\n        //     disableClickEventBubbling: true,\n        //     renderCell: (params: CellParams) => {\n\n        //         const api: GridApi = params.api;\n        //         const fields = api\n        //             .getAllColumns()\n        //             .map((c) => c.field)\n        //             .filter((c) => c !== \"__check__\" && !!c);\n        //         const thisRow = {};\n\n        //         fields.forEach((f) => {\n        //             thisRow[f] = params.getValue(f);\n        //         });\n\n        //         const acciones = [\n        //             {\n        //                 id: thisRow.id,\n        //                 action: \"get\",\n        //                 title: \"ver\",\n        //                 handle: null,\n        //                 rowdata: thisRow,\n        //                 path: `/${modelo}/get/${thisRow.id}`,\n        //             },\n        //         ]\n        //         return <MenuButtonListCpt acciones={acciones} />\n        //     },\n        // },\n        {\n            field: \"votado\",\n            headerName: \"VOTADO\",\n            width: 120,\n            renderCell: (params: CellParams) => {\n                const onClick = () => {\n                    const api: GridApi = params.api;\n                    const fields = api\n                        .getAllColumns()\n                        .map((c) => c.field)\n                        .filter((c) => c !== \"__check__\" && !!c);\n                    const thisRow = {};\n\n                    fields.forEach((f) => {\n                        thisRow[f] = params.getValue(f);\n                    });\n\n                    performAction(thisRow);\n                };\n                if (params.value === 1) {\n                    return <DoneAllIcon\n                        style={{ color: '#03a9f4' }}\n                        onClick={onClick}\n                    />;\n                } else {\n                    return <RadioButtonUncheckedIcon\n                        onClick={onClick}\n                    />;\n                }\n\n            },\n        },\n\n        // {\n        //     field: \"idpuesto\",\n        //     headerName: \"IDPUESTO\",\n        //     width: 180,\n        // },\n        // {\n        //     field: \"idrol\",\n        //     headerName: \"IDROL\",\n        //     width: 180,\n        // },\n        // {\n        //     field: \"idjefe\",\n        //     headerName: \"IDJEFE\",\n        //     width: 180,\n        // },\n        // {\n        //     field: \"zona\",\n        //     headerName: \"ZONA\",\n        //     width: 180,\n        // },\n        // {\n        //     field: \"puesto\",\n        //     headerName: \"PUESTO\",\n        //     width: 180,\n        // },\n        {\n            field: \"nombre\",\n            headerName: \"NOMBRE\",\n            width: 200,\n        },\n        {\n            field: \"apellidos\",\n            headerName: \"NOMBRE\",\n            width: 200,\n        },\n        {\n            field: \"telefono\",\n            headerName: \"TELEFONO\",\n            width: 180,\n        },\n        {\n            field: \"domicilio\",\n            headerName: \"DOMICILIO\",\n            width: 512,\n        },\n        // {\n        //     field: \"claveelector\",\n        //     headerName: \"CLAVEELECTOR\",\n        //     width: 180,\n        // },\n\n        // {\n        //     field: \"municipio\",\n        //     headerName: \"MUNICIPIO\",\n        //     width: 180,\n        // },\n        // {\n        //     field: \"localidad\",\n        //     headerName: \"LOCALIDAD\",\n        //     width: 180,\n        // },\n        // {\n        //     field: \"distrito\",\n        //     headerName: \"DISTRITO\",\n        //     width: 180,\n        // },\n        {\n            field: \"horavoto\",\n            headerName: \"HORAVOTO\",\n            width: 180,\n        },\n\n    ];\n\n    return (\n        <div>\n            <Breadcrumbs aria-label=\"breadcrumb\">\n                <Link color=\"inherit\" href=\"/home\" >\n                    Home\n      \t\t\t</Link>\n                <Link\n                    color=\"textPrimary\"\n                    href=\"/promovidos\"\n                    onClick={handleClick}\n                    aria-current=\"page\"\n                >\n                    Captura de votos\n      \t\t\t</Link>\n            </Breadcrumbs><br />\n            <ResizableBox width={600} height={400}\n                minConstraints={[100, 100]} maxConstraints={[600, 500]}>\n                <BarChartDemo tag={\"Meta de votos: \"} meta={activistas.length} votados={votados()} />\n            </ResizableBox>\n            <DataGridCpt columns={columns} actArray={activistas} reload={reload} pagesize={100} />\n        </div>\n    );\n};\n\nexport default CapturaDeVotos;\n","/home/node/aplicacion/mdc-softare-frontend/src/components/pages/Graficas.jsx",["235","236","237","238","239","240","241","242","243","244","245","246","247","248"],"import React, { useEffect, Component } from \"react\";\nimport { Divider } from '@material-ui/core'\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\nimport Link from '@material-ui/core/Link';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getGraficasGeneroAccion, } from \"../../redux/GraficasGeneroDucks\";\nimport { getGraficasEdadAccion, } from \"../../redux/GraficasEdadDucks\";\nimport { getGraficasSeccionAccion, } from \"../../redux/GraficasSeccionDucks\";\nimport PieChart from '../charts/PieChart';\nimport MultiAxisChart from '../charts/MultiAxisChart';\nimport PolarChart from '../charts/PolarChart';\n\n//BreadCums\nfunction handleClick(event) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n}\n\nconst Graficas = () => {\n    const dispatch = useDispatch();\n    const genero = useSelector((store) => store.graficasGenero.array);\n    const edad = useSelector((store) => store.graficasEdad.array);\n    const seccion = useSelector((store) => store.graficasSeccion.array);\n\n\n\n    useEffect(() => {\n        dispatch(getGraficasGeneroAccion());\n        dispatch(getGraficasEdadAccion());\n        dispatch(getGraficasSeccionAccion());\n\n\n        const idgenero = setInterval(() => {\n            dispatch(getGraficasGeneroAccion());\n\n        }, 30000);\n\n        return () => clearInterval(idgenero);\n\n        const idedad = setInterval(() => {\n            dispatch(getGraficasEdadAccion());\n\n        }, 30000);\n\n        return () => clearInterval(idedad);\n\n        const idseccion = setInterval(() => {\n            dispatch(getGraficasSeccionAccion());\n\n        }, 30000);\n\n        return () => clearInterval(idseccion);\n    }, []);\n\n    //============== GENERO ==============\n    const getTagsGenero = () => {\n        const tagsGenero = [];\n        genero.map(item => {\n            tagsGenero.push(item.genero === 'F' ? 'Mujeres' : 'Hombres')\n        });\n        return tagsGenero;\n    }\n\n    const getVotosGenero = () => {\n        const votos = [];\n        genero.map(item => {\n            votos.push(item.votos)\n        });\n        return votos;\n    }\n\n    const getColoresGenero = () => {\n        const colores = [];\n        let color = '';\n        genero.map(item => {\n            color = \"#\" + Math.floor(Math.random() * 16777215).toString(16);\n            colores.push(color)\n        });\n        return colores;\n    }\n    //============== GENERO ==============\n\n    //============== EDAD ==============\n    const getTagsEdad = () => {\n        const tagsEdad = [];\n        edad.map(item => {\n            tagsEdad.push(item.edad)\n        });\n        return tagsEdad;\n    }\n\n    const getVotosEdad = () => {\n        const votos = [];\n        edad.map(item => {\n            votos.push(item.votos)\n        });\n        return votos;\n    }\n\n    const getColoresEdad = () => {\n        const colores = [];\n        let color = '';\n        edad.map(item => {\n            color = \"#\" + Math.floor(Math.random() * 16777215).toString(16);\n            colores.push(color)\n        });\n        return colores;\n    }\n    //============== EDAD ==============\n\n    //============== SECCION ==============\n    const getTagsSeccion = () => {\n        const tagsSeccion = [];\n        seccion.map(item => {\n            tagsSeccion.push(item.seccion)\n        });\n        return tagsSeccion;\n    }\n\n    const getVotosSeccion = () => {\n        const votos = [];\n        seccion.map(item => {\n            votos.push(item.votos)\n        });\n        return votos;\n    }\n\n    const getColoresSeccion = () => {\n        const colores = [];\n        let color = '';\n        seccion.map(item => {\n            color = \"#\" + Math.floor(Math.random() * 16777215).toString(16);\n            colores.push(color)\n        });\n        return colores;\n    }\n    //============== SECCION ==============\n\n\n\n\n    return (\n        <div >\n            <Breadcrumbs aria-label=\"breadcrumb\">\n                <Link color=\"inherit\" href=\"/home\" >\n                    Home\n      \t\t\t</Link>\n                <Link\n                    color=\"textPrimary\"\n                    href=\"/promovidos\"\n                    onClick={handleClick}\n                    aria-current=\"page\"\n                >\n                    Graficas\n      \t\t\t</Link>\n            </Breadcrumbs><br />\n            Hombres / Mujeres\n            <PieChart data={getVotosGenero()} tags={getTagsGenero()} colors={getColoresGenero()} />\n            <Divider />\n            Votos / Edades\n            <Divider />\n            <MultiAxisChart data={getVotosEdad()} tags={getTagsEdad()} colors={getColoresEdad()} label={\"Votos por edad\"} />\n            <Divider />\n                Votos / Seccion\n            <PolarChart data={getVotosSeccion()} tags={getTagsSeccion()} colors={getColoresSeccion()} label={\"Votos por seccion\"} />\n            <Divider />\n\n        </div>\n    )\n}\n\nexport default Graficas\n\n","/home/node/aplicacion/mdc-softare-frontend/src/components/pages/Casillas.jsx",["249"],"import React, { useEffect } from \"react\";\nimport {\n    getCasillaAccion, createCasillaAccion,\n    updateCasillaAccion, deleteCasillaAccion\n} from \"../../redux/CasillasDucks\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport DataGridCpt from \"../utils/DataGridCpt\";\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\nimport Link from '@material-ui/core/Link';\nimport MenuButtonListCpt from '../utils/MenuButtonListCpt';\n\nconst Casillas = () => {\n    //Store y redux\n    const dispatch = useDispatch();\n    const casillas = useSelector((store) => store.casillas.array);\n    const reload = useSelector((store) => store.casillas.reload);\n\n    //Nombre modelo\n    const modelo = \"casillas\";\n\n    //Acciones repository    \n    const handleCreate = (casilla) => {\n        dispatch(createCasillaAccion(casilla));\n    };\n\n    const handleUpdate = (casilla) => {\n        dispatch(updateCasillaAccion(casilla));\n    };\n\n    const handleDelete = (casilla) => {\n        dispatch(deleteCasillaAccion(casilla));\n    };\n\n    //BreadCums\n    function handleClick(event) {\n        event.preventDefault();\n        console.info('You clicked a breadcrumb.');\n    }\n\n    //Casilla\n    const casilla = {\n        id: \"\",\n    };\n\n    //Hacemos carga inicial\n    useEffect(() => {\n        dispatch(getCasillaAccion(casilla));\n    }, []);\n\n    //Verificamos si hubo cambios\n    if (reload) {\n        dispatch(getCasillaAccion(casilla));\n    }\n\n    // Columnas\n    const columns = [\n        {\n            field: \"id\",\n            headerName: \"ID\",\n            width: 180,\n            hide: true,\n        },\n        {\n            field: \"actions\",\n            headerName: \"ACCION\",\n            width: 140,\n            disableClickEventBubbling: true,\n            renderCell: (params: CellParams) => {\n                const api: GridApi = params.api;\n                const fields = api\n                    .getAllColumns()\n                    .map((c) => c.field)\n                    .filter((c) => c !== \"__check__\" && !!c);\n                const thisRow = {};\n\n                fields.forEach((f) => {\n                    thisRow[f] = params.getValue(f);\n                });\n\n                const acciones = [\n                    // {\n                    //     id: thisRow.id,\n                    //     action: \"get\",\n                    //     title: \"ver\",\n                    //     handle: null,\n                    //     rowdata: thisRow,\n                    //     path: `/${modelo}/get/${thisRow.id}`,\n                    // },\n                    {\n                        id: \"00e64e87-ac11-4465-9556-5a5a28fbc7b5\",\n                        action: \"create\",\n                        title: \"crear\",\n                        handle: handleCreate,\n                        rowdata: thisRow,\n                        path: `${modelo}/create`\n                    },\n                    {\n                        id: \"00e64e87-ac11-4465-9556-5a5a28fbc7b5\",\n                        action: \"update\",\n                        title: \"actualizar\",\n                        handle: handleUpdate,\n                        rowdata: thisRow,\n                        path: `${modelo}/update/${thisRow.id}`\n                    },\n                    // {\n                    //     id: \"00e64e87-ac11-4465-9556-5a5a28fbc7b5\",\n                    //     action: \"delete\",\n                    //     title: \"eliminar\",\n                    //     handle: handleDelete,\n                    //     rowdata: thisRow,\n                    //     path: `${modelo}`\n                    // },\n\n                ]\n                return <MenuButtonListCpt acciones={acciones} create={handleCreate} actualizar={handleUpdate} delete={handleDelete} />\n            },\n        },\n        {\n            field: \"idrepresentantecasilla\",\n            headerName: \"IDREPRESENTANTECASILLA\",\n            width: 180,\n        },\n        {\n            field: \"seccionasignada\",\n            headerName: \"SECCIONASIGNADA\",\n            width: 180,\n        },\n        {\n            field: \"cargo\",\n            headerName: \"CARGO\",\n            width: 180,\n        },\n        {\n            field: \"apertura\",\n            headerName: \"APERTURA\",\n            width: 180,\n        },\n        {\n            field: \"horaapertura\",\n            headerName: \"HORAAPERTURA\",\n            width: 180,\n        },\n        {\n            field: \"flujo1230pm\",\n            headerName: \"FLUJO1230PM\",\n            width: 180,\n        },\n        {\n            field: \"promovidos1230pm\",\n            headerName: \"PROMOVIDOS1230PM\",\n            width: 180,\n        },\n        {\n            field: \"flujo430pm\",\n            headerName: \"FLUJO430PM\",\n            width: 180,\n        },\n        {\n            field: \"promovidos430pm\",\n            headerName: \"PROMOVIDOS430PM\",\n            width: 180,\n        },\n        {\n            field: \"flujo6pm\",\n            headerName: \"FLUJO6PM\",\n            width: 180,\n        },\n        {\n            field: \"promovidos6pm\",\n            headerName: \"PROMOVIDOS6PM\",\n            width: 180,\n        },\n        {\n            field: \"cierre6pm\",\n            headerName: \"CIERRE6PM\",\n            width: 180,\n        },\n        {\n            field: \"horacierre\",\n            headerName: \"HORACIERRE\",\n            width: 180,\n        },\n        {\n            field: \"rpp1\",\n            headerName: \"RPP1\",\n            width: 180,\n        },\n        {\n            field: \"rpp2\",\n            headerName: \"RPP2\",\n            width: 180,\n        },\n        {\n            field: \"rps1\",\n            headerName: \"RPS1\",\n            width: 180,\n        },\n        {\n            field: \"incidente\",\n            headerName: \"INCIDENTE\",\n            width: 180,\n        },\n        {\n            field: \"nombre\",\n            headerName: \"NOMBRE\",\n            width: 180,\n        },\n        {\n            field: \"municipio\",\n            headerName: \"MUNICIPIO\",\n            width: 180,\n        },\n        {\n            field: \"localidad\",\n            headerName: \"LOCALIDAD\",\n            width: 180,\n        },\n        {\n            field: \"distrito \",\n            headerName: \"DISTRITO\",\n            width: 180,\n        },\n    ];\n\n    return (\n        <div>\n            <Breadcrumbs aria-label=\"breadcrumb\">\n                <Link color=\"inherit\" href=\"/home\" >\n                    Home\n      \t\t\t</Link>\n                <Link\n                    color=\"textPrimary\"\n                    href=\"/casillas\"\n                    onClick={handleClick}\n                    aria-current=\"page\"\n                >\n                    Casillas\n      \t\t\t</Link>\n            </Breadcrumbs><br />\n            <DataGridCpt columns={columns} actArray={casillas} reload={reload} />\n        </div>\n    )\n}\n\nexport default Casillas\n","/home/node/aplicacion/mdc-softare-frontend/src/components/pages/GestionarPromovidos.jsx",["250","251","252"],"import React, { useEffect, useState } from \"react\";\nimport {\n    retrievePersonaActivistaAccion,\n    updateVotoAccion,\n    createPersonaActivistaAccion,\n    updatePersonaActivistaAccion,\n    deletePersonaActivistaAccion\n} from \"../../redux/PersonaActivistaDucks\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\nimport Link from '@material-ui/core/Link';\nimport MaterialTableEditableCpt from '../utils/MaterialTableEditableCpt';\n\n\nconst GestionarPromovidos = () => {\n    const dispatch = useDispatch();\n    const activistas = useSelector((store) => store.personasActivistas.array);\n    const reload = useSelector((store) => store.personasActivistas.reload);\n\n\n\n    //BreadCums\n    function handleClick(event) {\n        event.preventDefault();\n        console.info('You clicked a breadcrumb.');\n    }\n\n    //Create\n    const handleCreate = (data) => {\n        console.log(\"handleCreate\" + data)\n        dispatch(createPersonaActivistaAccion(data));\n    }\n    //Update\n    const handleUpdate = (data) => {\n        console.log(\"handleUpdate\" + data)\n        dispatch(updatePersonaActivistaAccion(data));\n    }\n    //Delete\n    const handleDelete = (data) => {\n        console.log(\"handleDelete\" + data)\n        dispatch(deletePersonaActivistaAccion(data));\n    }\n\n    //Persona\n    const persona = {\n        id: \"\",\n        votado: 0,\n    };\n\n    //Hacemos carga inicial\n    useEffect(() => {\n        dispatch(retrievePersonaActivistaAccion(persona));\n    }, []);\n\n    //Verificamos si hubo cambios\n    if (reload) {\n        dispatch(retrievePersonaActivistaAccion(persona));\n    }\n\n    // Columnas\n    const columns = [\n        {\n            field: \"idpuesto\",\n            title: \"IDPUESTO\",\n            width: 120,\n        },\n        {\n            field: \"idrol\",\n            title: \"IDROL\",\n            width: 100,\n        },\n        {\n            field: \"idjefe\",\n            title: \"IDJEFE\",\n            width: 100,\n        },\n        {\n            field: \"puesto\",\n            title: \"PUESTO\",\n            lookup: { 'COORDINADOR': 'COORDINADOR', 'ACTIVISTA': 'ACTIVISTA', 'PROMOVIDO': 'PROMOVIDO' },\n\n        },\n        {\n            field: \"nombre\",\n            title: \"NOMBRE\",\n            width: 200,\n        },\n        {\n            field: \"apellidos\",\n            title: \"APELLIDOS\",\n            width: 200,\n        },\n        {\n            field: \"telefono\",\n            title: \"TELEFONO\",\n            width: 180,\n        },\n        {\n            field: \"domicilio\",\n            title: \"DOMICILIO\",\n            width: 100,\n        },\n        {\n            field: \"seccion\",\n            title: \"SECCION\",\n            width: 100,\n        },\n        {\n            field: \"ocupacion\",\n            title: \"OCUPACION\",\n            width: 200,\n        },\n        {\n            field: \"edad\",\n            title: \"EDAD\",\n            width: 100,\n        },\n        {\n            field: \"genero\",\n            title: \"GENERO\",\n            width: 100,\n            lookup: { F: 'F', M: 'M' },\n        },\n        {\n            field: \"claveelector\",\n            title: \"CLAVEELECTOR\",\n            width: 180,\n        },\n        {\n            field: \"localidad\",\n            title: \"LOCALIDAD\",\n            width: 180,\n        },\n        {\n            field: \"municipio\",\n            title: \"MUNICIPIO\",\n            width: 180,\n        },\n    ];\n\n    return (\n        <div>\n            <Breadcrumbs aria-label=\"breadcrumb\">\n                <Link color=\"inherit\" href=\"/home\" >\n                    Home\n      \t\t\t</Link>\n                <Link\n                    color=\"textPrimary\"\n                    href=\"/casillas\"\n                    onClick={handleClick}\n                    aria-current=\"page\"\n                >\n                    Gestionar promovidos\n      \t\t\t</Link>\n            </Breadcrumbs><br />\n\n            <MaterialTableEditableCpt\n                columns={columns}\n                data={activistas}\n                handleCreate={handleCreate}\n                handleUpdate={handleUpdate}\n                handleDelete={handleDelete}\n            >\n            </MaterialTableEditableCpt>\n            {/* <AlertMessagesCpt></AlertMessagesCpt> */}\n        </div >\n    )\n}\n\nexport default GestionarPromovidos","/home/node/aplicacion/mdc-softare-frontend/src/components/pages/IncidentesCasillas.jsx",["253"],"import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { obtenerinfoAdicionalCasillaAccion } from \"../../redux/InfoAdicionalCasillasDucks\";\nimport DataGridCpt from \"../utils/DataGridCpt\";\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\nimport Link from '@material-ui/core/Link';\n\nconst IncidentesCasillas = () => {\n    //Store y redux\n    const dispatch = useDispatch();\n    const infoAdicionalCasillas = useSelector((store) => store.infoAdicionalCasillas.array);\n\n    //BreadCums\n    function handleClick(event) {\n        event.preventDefault();\n        console.info('You clicked a breadcrumb.');\n    }\n\n    // Columnas\n    const columns = [\n        {\n            field: \"id\",\n            headerName: \"IDINFOADICIONALCASILLA\",\n            width: 180,\n        },\n        {\n            field: \"idcasilla\",\n            headerName: \"IDCASILLA\",\n            width: 180,\n        },\n        {\n            field: \"seccionasignada\",\n            headerName: \"SECCIONASIGNADA\",\n            width: 180,\n        },\n        {\n            field: \"horaapertura\",\n            headerName: \"HORAAPERTURA\",\n            width: 180,\n        },\n        {\n            field: \"horacierre\",\n            headerName: \"HORACIERRE\",\n            width: 180,\n        },\n        {\n            field: \"incidenteuno\",\n            headerName: \"INCIDENTEUNO\",\n            width: 180,\n        },\n        {\n            field: \"horaincidenteuno\",\n            headerName: \"HORAINCIDENTEUNO\",\n            width: 180,\n        },\n        {\n            field: \"incidentedos\",\n            headerName: \"INCIDENTEDOS\",\n            width: 180,\n        },\n        {\n            field: \"horaincidentedos\",\n            headerName: \"HORAINCIDENTEDOS\",\n            width: 180,\n        },\n        {\n            field: \"incidentetres\",\n            headerName: \"INCIDENTETRES\",\n            width: 180,\n        },\n        {\n            field: \"horaincidentetres\",\n            headerName: \"HORAINCIDENTETRES\",\n            width: 180,\n        },\n        {\n            field: \"incidentecuatro\",\n            headerName: \"INCIDENTECUATRO\",\n            width: 180,\n        },\n        {\n            field: \"horaincidentecuatro\",\n            headerName: \"HORAINCIDENTECUATRO\",\n            width: 180,\n        },\n        {\n            field: \"incidentecinco\",\n            headerName: \"INCIDENTECINCO\",\n            width: 180,\n        },\n        {\n            field: \"horaincidentecinco\",\n            headerName: \"HORAINCIDENTECINCO\",\n            width: 180,\n        },\n        {\n            field: \"prip1\",\n            headerName: \"PRIP1\",\n            width: 180,\n        },\n        {\n            field: \"prip2\",\n            headerName: \"PRIP2\",\n            width: 180,\n        },\n        {\n            field: \"pris1\",\n            headerName: \"PRIS1\",\n            width: 180,\n        },\n        {\n            field: \"pris2\",\n            headerName: \"PRIS2\",\n            width: 180,\n        },\n        {\n            field: \"presidente\",\n            headerName: \"PRESIDENTE\",\n            width: 180,\n        },\n        {\n            field: \"sec1\",\n            headerName: \"SEC1\",\n            width: 180,\n        },\n        {\n            field: \"sec2\",\n            headerName: \"SEC2\",\n            width: 180,\n        },\n        {\n            field: \"esc1\",\n            headerName: \"ESC1\",\n            width: 180,\n        },\n        {\n            field: \"esc2\",\n            headerName: \"ESC2\",\n            width: 180,\n        },\n        {\n            field: \"esc3\",\n            headerName: \"ESC3\",\n            width: 180,\n        },\n        {\n            field: \"sup1\",\n            headerName: \"SUP1\",\n            width: 180,\n        },\n        {\n            field: \"sup2\",\n            headerName: \"SUP2\",\n            width: 180,\n        },\n        {\n            field: \"sup3\",\n            headerName: \"SUP3\",\n            width: 180,\n        },\n    ];\n\n    //Hacemos carga inicial\n    useEffect(() => {\n        dispatch(obtenerinfoAdicionalCasillaAccion());\n    }, []);\n\n    return (\n        <div>\n            <Breadcrumbs aria-label=\"breadcrumb\">\n                <Link color=\"inherit\" href=\"/home\" >\n                    Home\n      \t\t\t</Link>\n                <Link\n                    color=\"textPrimary\"\n                    href=\"/casillas\"\n                    onClick={handleClick}\n                    aria-current=\"page\"\n                >\n                    Incidentes Casillas\n      \t\t\t</Link>\n            </Breadcrumbs><br />\n            <DataGridCpt columns={columns} actArray={infoAdicionalCasillas} />\n        </div>\n    )\n}\n\nexport default IncidentesCasillas\n","/home/node/aplicacion/mdc-softare-frontend/src/components/pages/Elecciones.jsx",["254"],"import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n    getEleccionesAccion, createEleccionesAccion,\n    updateEleccionesAccion, deleteEleccionesAccion\n} from \"../../redux/EleccionesDucks\";\nimport DataGridCpt from \"../utils/DataGridCpt\";\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\nimport Link from '@material-ui/core/Link';\nimport MenuButtonListCpt from '../utils/MenuButtonListCpt';\n\nconst Elecciones = () => {\n    //Datos iniciales\n    const dispatch = useDispatch();\n    const elecciones = useSelector((store) => store.elecciones.array);\n    const reload = useSelector((store) => store.elecciones.reload);\n\n    //Nombre modelo\n    const modelo = \"elecciones\";\n\n    //Acciones repository    \n    const handleCreate = (eleccion) => {\n        dispatch(createEleccionesAccion(eleccion));\n    };\n\n    const handleUpdate = (eleccion) => {\n        dispatch(updateEleccionesAccion(eleccion));\n    };\n\n    const handleDelete = (eleccion) => {\n        dispatch(deleteEleccionesAccion(eleccion));\n    };\n\n    //eleccion\n    const eleccion = {\n        id: \"\",\n    };\n\n    //Carga iniciales\n    useEffect(() => {\n        dispatch(getEleccionesAccion(eleccion));\n    }, []);\n\n    //Verificamos si hubo cambios\n    if (reload) {\n        dispatch(getEleccionesAccion(eleccion));\n    }\n\n    //BreadCums\n    function handleClick(event) {\n        event.preventDefault();\n        console.info('You clicked a breadcrumb.');\n    }\n\n    // Columnas\n    const columns = [\n        {\n            field: \"id\",\n            headerName: \"ID\",\n            width: 180,\n            hide: true,\n        },\n        {\n            field: \"actions\",\n            headerName: \"ACCION\",\n            width: 140,\n            disableClickEventBubbling: true,\n            renderCell: (params: CellParams) => {\n                const api: GridApi = params.api;\n                const fields = api\n                    .getAllColumns()\n                    .map((c) => c.field)\n                    .filter((c) => c !== \"__check__\" && !!c);\n                const thisRow = {};\n\n                fields.forEach((f) => {\n                    thisRow[f] = params.getValue(f);\n                });\n\n                const acciones = [\n                    // {\n                    //     id: thisRow.id,\n                    //     action: \"get\",\n                    //     title: \"ver\",\n                    //     handle: null,\n                    //     rowdata: thisRow,\n                    //     path: `/${modelo}/get/${thisRow.id}`,\n                    // },\n                    {\n                        id: \"00e64e87-ac11-4465-9556-5a5a28fbc7b5\",\n                        action: \"create\",\n                        title: \"crear\",\n                        handle: handleCreate,\n                        rowdata: thisRow,\n                        path: `${modelo}/create`\n                    },\n                    {\n                        id: \"00e64e87-ac11-4465-9556-5a5a28fbc7b5\",\n                        action: \"update\",\n                        title: \"actualizar\",\n                        handle: handleUpdate,\n                        rowdata: thisRow,\n                        path: `${modelo}/update/${thisRow.id}`\n                    },\n                    // {\n                    //     id: \"00e64e87-ac11-4465-9556-5a5a28fbc7b5\",\n                    //     action: \"delete\",\n                    //     title: \"eliminar\",\n                    //     handle: handleDelete,\n                    //     rowdata: thisRow,\n                    //     path: `${modelo}`\n                    // },\n\n                ]\n                return <MenuButtonListCpt acciones={acciones} create={handleCreate} actualizar={handleUpdate} delete={handleDelete} />\n            },\n        },\n        {\n            field: \"seccion\",\n            headerName: \"SECCION\",\n            width: 180,\n\n        },\n        {\n            field: \"pan\",\n            headerName: \"PAN\",\n            width: 180,\n\n        },\n        {\n            field: \"pri\",\n            headerName: \"PRI\",\n            width: 180,\n\n        },\n        {\n            field: \"prd\",\n            headerName: \"PRD\",\n            width: 180,\n\n        },\n        {\n            field: \"pvem\",\n            headerName: \"PVEM\",\n            width: 180,\n\n        },\n        {\n            field: \"pt\",\n            headerName: \"PT\",\n            width: 180,\n\n        },\n        {\n            field: \"movciudadano\",\n            headerName: \"MOVCIUDADANO\",\n            width: 180,\n\n        },\n        {\n            field: \"nuevaalianza\",\n            headerName: \"NUEVAALIANZA\",\n            width: 180,\n\n        },\n        {\n            field: \"morena\",\n            headerName: \"MORENA\",\n            width: 180,\n\n        },\n        {\n            field: \"encuentrosocial\",\n            headerName: \"ENCUENTROSOCIAL\",\n            width: 180,\n\n        },\n        {\n            field: \"panprd\",\n            headerName: \"PANPRD\",\n            width: 180,\n\n        },\n        {\n            field: \"pripvemnuevaalianza\",\n            headerName: \"PRIPVEMNUEVAALIANZA\",\n            width: 180,\n\n        },\n        {\n            field: \"pripvem\",\n            headerName: \"PRIPVEM\",\n            width: 180,\n\n        },\n        {\n            field: \"prinuevaalianza\",\n            headerName: \"PRINUEVAALIANZA\",\n            width: 180,\n\n        },\n        {\n            field: \"pvemnuevaalianza\",\n            headerName: \"PVEMNUEVAALIANZA\",\n            width: 180,\n\n        },\n        {\n            field: \"candidatosnoregistrados\",\n            headerName: \"CANDIDATOSNOREGISTRADOS\",\n            width: 180,\n\n        },\n        {\n            field: \"nulos\",\n            headerName: \"NULOS\",\n            width: 180,\n\n        },\n        {\n            field: \"total\",\n            headerName: \"TOTAL\",\n            width: 180,\n\n        },\n    ];\n\n\n\n    return (\n        <div>\n            <Breadcrumbs aria-label=\"breadcrumb\">\n                <Link color=\"inherit\" href=\"/home\" >\n                    Home\n      \t\t\t</Link>\n                <Link\n                    color=\"textPrimary\"\n                    href=\"/promovidos\"\n                    onClick={handleClick}\n                    aria-current=\"page\"\n                >\n                    Elecciones\n      \t\t\t</Link>\n            </Breadcrumbs><br />\n            <DataGridCpt columns={columns} actArray={elecciones} reload={reload} />\n        </div>\n    )\n}\n\nexport default Elecciones","/home/node/aplicacion/mdc-softare-frontend/src/components/pages/SignIn.jsx",["255","256","257","258","259","260"],"import React, { Fragment } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport { getLoginAccion } from \"../../redux/LoginDucks\";\nimport { useForm } from 'react-hook-form'\n\nfunction Copyright() {\n    return (\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n            {'Copyright © '}\n            <Link color=\"inherit\" href=\"https://material-ui.com/\">\n                Centinela Software\n      </Link>{' '}\n            {new Date().getFullYear()}\n            {'.'}\n        </Typography>\n    );\n}\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        marginTop: theme.spacing(8),\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(1),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n}));\n\nexport default function SignIn() {\n    //Store y configuracion REDUX\n    const dispatch = useDispatch();\n    const loginRedux = useSelector((store) => store.login.array);\n    const reload = useSelector((store) => store.login.reload);\n\n    //Estilos\n    const classes = useStyles();\n\n    //react-hook-forms\n    const { register, errors, handleSubmit } = useForm();\n\n    //HandleClick\n    const onSubmit = (data) => {\n        console.log(data)\n        dispatch(getLoginAccion(data));\n    }\n\n    return (\n        <Container component=\"main\" maxWidth=\"xs\">\n            <CssBaseline />\n            <div className={classes.paper}>\n                <Avatar className={classes.avatar}>\n                    <LockOutlinedIcon />\n                </Avatar>\n                <Typography component=\"h1\" variant=\"h5\">\n                    Identificate\n        </Typography>\n                <form className={classes.form} onSubmit={handleSubmit(onSubmit)} noValidate autoComplete=\"off\">\n                    <h6><span className=\"text-danger text-small d-block mb-2\">{errors?.usuario?.message}</span></h6>\n                    <TextField inputRef={register({ required: { value: true, message: 'Usuario requerido' } })}\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        id=\"usuario\"\n                        label=\"Usuario\"\n                        name=\"usuario\"\n                        autoComplete=\"usuario\"\n                        autoFocus\n                    />\n                    <h6><span className=\"text-danger text-small d-block mb-2\">{errors?.password?.message}</span></h6>\n                    <TextField inputRef={register({ required: { value: true, message: 'Password requerido' } })}\n                        variant=\"outlined\"\n                        margin=\"normal\"\n                        required\n                        fullWidth\n                        name=\"password\"\n                        label=\"Password\"\n                        type=\"password\"\n                        id=\"password\"\n                        autoComplete=\"current-password\"\n                    />\n                    {/* <FormControlLabel\n                        control={<Checkbox value=\"remember\" color=\"primary\" />}\n                        label=\"Remember me\"\n                    /> */}\n                    <Button\n                        type=\"submit\"\n                        fullWidth\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.submit}\n                    >\n                        Acceder\n          </Button>\n                    {/* <Grid container>\n                        <Grid item xs>\n                            <Link href=\"#\" variant=\"body2\">\n                                Forgot password?\n              </Link>\n                        </Grid>\n                        <Grid item>\n                            <Link href=\"#\" variant=\"body2\">\n                                {\"Don't have an account? Sign Up\"}\n                            </Link>\n                        </Grid>\n                    </Grid> */}\n                </form>\n            </div>\n            <Box mt={8}>\n                <Copyright />\n            </Box>\n        </Container>\n    );\n}","/home/node/aplicacion/mdc-softare-frontend/src/components/pages/Promovidos/PromovidoDetalle.jsx",["261","262","263"],"import React, { useEffect } from \"react\";\nimport { useParams } from 'react-router-dom'\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { retrievePersonaActivistaAccion, updateVotoAccion } from \"../../../redux/PersonaActivistaDucks\";\nimport MaterialTableCpt from '../../utils/MaterialTableCpt';\nimport PieChart from '../../charts/PieChart';\nimport { ResizableBox } from 'react-resizable';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\nimport Link from '@material-ui/core/Link';\n\n\nconst PromovidoDetalle = () => {\n\t//Store y configuracion REDUX\n\tconst dispatch = useDispatch();\n\tconst activistas = useSelector((store) => store.personasActivistas.array);\n\n\t//BreadCums\n\tfunction handleClick(event) {\n\t\tevent.preventDefault();\n\t\tconsole.info('You clicked a breadcrumb.');\n\t}\n\n\t//Recibimos parametros\n\tconst { id } = useParams()\n\n\t//Persona\n\tconst persona = {\n\t\tid: id,\n\t\tvotado: 0,\n\t};\n\n\t//Hacemos carga inicial\n\tuseEffect(() => {\n\t\tpersona.id = id;\n\t\tdispatch(retrievePersonaActivistaAccion(persona));\n\t}, []);\n\n\t//Reasignamos datos id para mapear tipo arbol\n\tconst preparaDatos = () => {\n\t\t//reasignamos id\n\t\tactivistas.map(\n\t\t\titem => {\n\t\t\t\titem.id = item.idpuesto\n\t\t\t}\n\t\t)\n\t}\n\n\tconst imprimeDatosActivista = () => {\n\t\tif (activistas[0] === undefined) {\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t< h5 > Cargando... </h5 >\n\t\t\t\t</div>\n\t\t\t)\n\t\t} return (\n\t\t\t<div>\n\t\t\t\t< h5 > Nombre: {activistas[0].nombre}</h5 >\n\t\t\t\t< h5 > Telefono: {activistas[0].telefono}</h5 >\n\t\t\t\t< h5 > Domicilio: {activistas[0].domicilio}</h5 >\n\t\t\t</div>\n\t\t)\n\n\t}\n\n\tconst suma = () => {\n\t\tlet suma = 0;\n\t\tactivistas.forEach(item =>\n\t\t\tsuma = suma + item.votado,\n\t\t);\n\t\treturn suma;\n\t}\n\n\tconst getColores = () => {\n\t\tconst colores = [];\n\t\tlet color1 = \"#\" + Math.floor(Math.random() * 16777215).toString(16);\n\t\tlet color2 = \"#\" + Math.floor(Math.random() * 16777215).toString(16);\n\t\tcolores.push(color1)\n\t\tcolores.push(color2)\n\n\t\treturn colores;\n\t}\n\t//Columnas\n\tconst columns = [\n\t\t{ title: 'VOTADO', field: 'votado', headerStyle: { minWidth: 100 }, cellStyle: { minWidth: 100 }, },\n\t\t{ title: 'IDPUESTO', field: 'idpuesto', headerStyle: { minWidth: 100 }, cellStyle: { minWidth: 100 }, },\n\t\t{ title: 'IDROL', field: 'idrol', headerStyle: { minWidth: 100 }, cellStyle: { minWidth: 100 }, },\n\t\t{ title: 'IDJEFE', field: 'idjefe', headerStyle: { minWidth: 100 }, cellStyle: { minWidth: 100 }, },\n\t\t{ title: 'PUESTO', field: 'puesto', headerStyle: { minWidth: 180 }, cellStyle: { minWidth: 180 }, },\n\t\t{ title: 'NOMBRE', field: 'nombre', headerStyle: { minWidth: 200 }, cellStyle: { minWidth: 200 }, },\n\t\t{ title: 'APELLIDOS', field: 'apellidos', headerStyle: { minWidth: 200 }, cellStyle: { minWidth: 200 }, },\n\t\t{ title: 'TELEFONO', field: 'telefono', headerStyle: { minWidth: 140 }, cellStyle: { minWidth: 140 }, },\n\t\t{ title: 'DOMICILIO', field: 'domicilio', headerStyle: { minWidth: 280 }, cellStyle: { minWidth: 280 }, },\n\t\t{ title: 'SECCION', field: 'seccion', headerStyle: { minWidth: 100 }, cellStyle: { minWidth: 100 }, },\n\t\t{ title: 'OCUPACION', field: 'ocupacion', headerStyle: { minWidth: 180 }, cellStyle: { minWidth: 180 }, },\n\t\t{ title: 'EDAD', field: 'edad', headerStyle: { minWidth: 100 }, cellStyle: { minWidth: 100 }, },\n\t\t{ title: 'GENERO', field: 'genero', headerStyle: { minWidth: 100 }, cellStyle: { minWidth: 100 }, },\n\t\t{ title: 'CLAVEELECTOR', field: 'claveelector', headerStyle: { minWidth: 180 }, cellStyle: { minWidth: 180 }, },\n\t\t{ title: 'LOCALIDAD', field: 'localidad', headerStyle: { minWidth: 180 }, cellStyle: { minWidth: 180 }, },\n\t\t{ title: 'MUNICIPIO', field: 'municipio', headerStyle: { minWidth: 180 }, cellStyle: { minWidth: 180 }, },\n\t\t{ title: 'HORAVOTO', field: 'horavoto', headerStyle: { minWidth: 180 }, cellStyle: { minWidth: 180 }, },\n\t];\n\n\treturn (\n\n\n\n\t\t<div >\n\t\t\t<Breadcrumbs aria-label=\"breadcrumb\">\n\t\t\t\t<Link color=\"inherit\" href=\"/home\" >\n\t\t\t\t\tHome\n      \t\t\t</Link>\n\t\t\t\t<Link color=\"inherit\" href=\"/promovidos\" >\n\t\t\t\t\tPromovidos\n      \t\t\t</Link>\n\t\t\t\t<Link\n\t\t\t\t\tcolor=\"textPrimary\"\n\t\t\t\t\thref=\"/promovidos/promovidosdetalle/\"\n\t\t\t\t\tonClick={handleClick}\n\t\t\t\t\taria-current=\"page\"\n\t\t\t\t>\n\t\t\t\t\tDetalle\n      \t\t\t</Link>\n\n\t\t\t</Breadcrumbs><br />\n\t\t\t{preparaDatos()}\n\t\t\t{imprimeDatosActivista()}\n\t\t\t<ResizableBox width={600} height={400}\n\t\t\t\tminConstraints={[100, 100]} maxConstraints={[600, 400]}>\n\t\t\t\t<h4>Meta: {activistas.length}</h4>\n\t\t\t\t<PieChart data={[suma(), (activistas.length - suma())]} tags={[\"Votados\", \"No Votados\"]} colors={getColores()} />\n\t\t\t</ResizableBox>\n\n\t\t\t<MaterialTableCpt title={\"Detalles promovido\"} columns={columns} data={activistas} parentChildData={(row, rows) => rows.find(a => a.id === row.idjefe)} />\n\n\t\t</div>\n\n\t)\n}\n\nexport default PromovidoDetalle\n\n\n","/home/node/aplicacion/mdc-softare-frontend/src/components/pages/Casillas/CreateCasilla.jsx",["264"],"import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\nimport Link from '@material-ui/core/Link';\nimport { useForm } from 'react-hook-form'\nimport { createCasillaAccion } from \"../../../redux/CasillasDucks\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            margin: theme.spacing(1),\n            width: '25ch',\n            border: \"\",\n        },\n    },\n}));\n\n//BreadCums\nfunction handleClick(event) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n}\n\n\n\n\nconst CreateCasilla = () => {\n    //Store y redux\n    const dispatch = useDispatch();\n\n    //Handle Create\n    const handleCreate = (casilla) => {\n        dispatch(createCasillaAccion(casilla));\n    };\n\n    //react-hook-forms\n    const { register, errors, handleSubmit } = useForm();\n    const onSubmit = (data, e) => {\n        handleCreate(data);\n        e.target.reset();\n    }\n\n    const classes = useStyles();\n\n    return (\n        <div>\n            <Breadcrumbs aria-label=\"breadcrumb\">\n                <Link color=\"inherit\" href=\"/home\" >\n                    Home\n      \t\t\t</Link>\n                <Link color=\"inherit\" href=\"/casillas\" >\n                    Casillas\n      \t\t\t</Link>\n                <Link\n                    color=\"textPrimary\"\n                    href=\"/casillas/create\"\n                    onClick={handleClick}\n                    aria-current=\"page\"\n                >\n                    Crear casilla\n      \t\t\t</Link>\n            </Breadcrumbs><br />\n\n            <form onSubmit={handleSubmit(onSubmit)} className={classes.root} noValidate autoComplete=\"off\">\n                <div className=\"card col-sm-10 col-md-10 col-lg-10 mb-5\" >\n                    <h3><div className=\"card-header \">\n                        Crear casilla\n                    </div></h3>\n\n                    <div className=\"card-body col-lg-12\">\n                        <h4><span className=\"text-danger text-small d-block mb-2\">{errors?.idrepresentantecasilla?.message}</span></h4><TextField inputRef={register({ required: { value: true, message: \"Representante obligatorio\" } })} name=\"idrepresentantecasilla\" required id=\"idrepresentantecasilla\" label=\"Representante de casilla\" defaultValue=\"\" />\n                        <h4><span className=\"text-danger text-small d-block mb-2\">{errors?.seccionasignada?.message}</span></h4><TextField inputRef={register({ required: { value: true, message: \"Seccion obligatoria\" } })} name=\"seccionasignada\" required id=\"seccionasignada\" label=\"Seccion asignada\" defaultValue=\"\" />\n                        <TextField inputRef={register({ required: { value: false } })} name=\"cargo\" id=\"cargo\" label=\"Cargo\" defaultValue=\"\" />\n                        <TextField inputRef={register({ required: { value: false } })} name=\"apertura\" id=\"apertura\" label=\"Apertura\" defaultValue=\"\" />\n                        <TextField\n                            inputRef={register({ required: { value: false } })}\n                            name=\"horaapertura\"\n                            id=\"horaapertura\"\n                            label=\"Hora apertura\"\n                            type=\"datetime-local\"\n                            defaultValue=\"2021-01-31T10:30\"\n                            className={classes.textField}\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                        />\n                    </div>\n                </div>\n\n\n                <div className=\"card col-sm-10 col-md-10 col-lg-10 mb-5\" >\n                    <h3><div className=\"card-header \">\n                        Flujo de votantes\n                    </div></h3>\n\n                    <div className=\"card-body col-lg-12 \">\n                        <TextField inputRef={register({ required: { value: false } })} name=\"flujo1230pm\" id=\"flujo1230pm\" label=\"Flujo 12-30\" defaultValue=\"\" variant=\"filled\" />\n                        <TextField inputRef={register({ required: { value: false } })} name=\"promovidos1230pm\" id=\"promovidos1230pm\" label=\"Promovidos 12-30\" defaultValue=\"\" variant=\"outlined\" type=\"number\" pattern=\"[0-9]\\d*\" />\n\n                        <TextField inputRef={register({ required: { value: false } })} name=\"flujo430pm\" id=\"flujo430pm\" label=\"Flujo 16-30\" defaultValue=\"\" variant=\"filled\" />\n                        <TextField inputRef={register({ required: { value: false } })} name=\"promovidos430pm\" id=\"promovidos430pm\" label=\"Promovidos 16-30\" defaultValue=\"\" variant=\"outlined\" type=\"number\" pattern=\"[0-9]\\d*\" />\n\n                        <TextField inputRef={register({ required: { value: false } })} name=\"flujo6pm\" id=\"flujo6pm\" label=\"Flujo 18\" defaultValue=\"\" variant=\"filled\" />\n                        <TextField inputRef={register({ required: { value: false } })} name=\"promovidos6pm\" id=\"promovidos6pm\" label=\"Promovidos 18\" defaultValue=\"\" variant=\"outlined\" type=\"number\" pattern=\"[0-9]\\d*\" />\n                    </div>\n                </div>\n\n\n                <div className=\"card col-sm-10 col-md-10 col-lg-10 mb-5\" >\n                    <h3><div className=\"card-header \">\n                        Cierre de casilla\n                    </div></h3>\n\n                    <div className=\"card-body col-lg-12\">\n                        <TextField inputRef={register({ required: { value: false } })} name=\"cierre6pm\" id=\"cierre6pm\" label=\"Cierre 18\" defaultValue=\"\" variant=\"outlined\" type=\"number\" pattern=\"[0-9]\\d*\" />\n                        <TextField\n                            inputRef={register({ required: { value: false } })}\n                            name=\"horacierre\"\n                            id=\"horacierre\"\n                            label=\"Hora cierre\"\n                            type=\"datetime-local\"\n                            defaultValue=\"2021-01-31T10:30\"\n                            className={classes.textField}\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                        />\n                    </div>\n                </div>\n\n                <div className=\"card col-sm-10 col-md-10 col-lg-10 mb-5\" >\n                    <h3><div className=\"card-header \">\n                        Representantes de casilla\n                    </div></h3>\n\n                    <div className=\"card-body col-lg-12 \">\n                        <TextField inputRef={register({ required: { value: false } })} name=\"rpp1\" id=\"rpp1\" label=\"Representante 1\" defaultValue=\"\" variant=\"filled\" />\n                        <TextField inputRef={register({ required: { value: false } })} name=\"rpp2\" id=\"rpp2\" label=\"Representante 2\" defaultValue=\"\" variant=\"filled\" />\n                        <TextField inputRef={register({ required: { value: false } })} name=\"rps1\" id=\"rps1\" label=\"Suplente 1\" defaultValue=\"\" variant=\"filled\" />\n                    </div>\n                </div>\n\n                <div className=\"card col-sm-10 col-md-10 col-lg-10 mb-5\" >\n                    <h3><div className=\"card-header \">\n                        Representantes de casilla\n                    </div></h3>\n\n                    <div className=\"card-body col-lg-12\">\n                        <TextField inputRef={register({ required: { value: false } })} name=\"incidente\" id=\"incidente\" label=\"Incidente\" defaultValue=\"\" variant=\"filled\" />\n                        <TextField inputRef={register({ required: { value: false } })} name=\"nombre\" id=\"nombre\" label=\"Nombre\" defaultValue=\"\" variant=\"filled\" />\n                        <TextField inputRef={register({ required: { value: false } })} name=\"municipio\" id=\"municipio\" label=\"Municipio\" defaultValue=\"\" variant=\"filled\" />\n                        <TextField inputRef={register({ required: { value: false } })} name=\"localidad\" id=\"localidad\" label=\"Localidad\" defaultValue=\"\" variant=\"filled\" />\n                        <TextField inputRef={register({ required: { value: false } })} name=\"distrito\" id=\"distrito\" label=\"Distrito\" defaultValue=\"\" variant=\"filled\" />\n                    </div>\n                </div>\n                <button className=\"btn btn-primary\">Enviar</button>\n            </form>\n        </div >\n    );\n}\n\nexport default CreateCasilla","/home/node/aplicacion/mdc-softare-frontend/src/components/pages/Casillas/UpdateCasilla.jsx",["265","266"],"import React, { useEffect, useState } from \"react\";\nimport TextField from '@material-ui/core/TextField';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useParams } from 'react-router-dom'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\nimport Link from '@material-ui/core/Link';\nimport { useForm } from 'react-hook-form'\nimport { updateCasillaAccion, getCasillaAccion } from \"../../../redux/CasillasDucks\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            margin: theme.spacing(1),\n            width: '25ch',\n            border: \"\",\n        },\n    },\n}));\n\n\nconst UpdateCasilla = () => {\n    //Store y configuracion REDUX\n    const dispatch = useDispatch();\n    const casillas = useSelector((store) => store.casillas.array);\n    const reload = useSelector((store) => store.casillas.reload);\n\n    //Recibimos parametros\n    const { id } = useParams()\n\n    //casilla\n    const casilla = {\n        id: id,\n    };\n\n    //Hacemos carga inicial\n    useEffect(() => {\n        casilla.id = id;\n        dispatch(getCasillaAccion(casilla));\n    }, []);\n\n    //Verificamos si hubo cambios\n    if (reload) {\n        casilla.id = id;\n        dispatch(getCasillaAccion(casilla));\n    }\n\n    //BreadCums\n    function handleClick(event) {\n        event.preventDefault();\n        console.info('You clicked a breadcrumb.');\n    }\n\n    //Handle update\n    const handleupdate = (data) => {\n        dispatch(updateCasillaAccion(data));\n    };\n\n    //react-hook-forms\n    const { register, errors, handleSubmit } = useForm();\n    const onSubmit = (data, e) => {\n        handleupdate(data);\n        e.target.reset();\n    }\n\n    const classes = useStyles();\n\n    //Form\n    const imprimeForm = () => {\n        if (casillas.length !== 1) {\n            return (\n                <div>\n                    < h5 > Cargando... </h5 >\n                </div>\n            )\n        }\n        return (\n\n            < div >\n                <Breadcrumbs aria-label=\"breadcrumb\">\n                    <Link color=\"inherit\" href=\"/home\" >\n                        Home\n      \t\t\t</Link>\n                    <Link color=\"inherit\" href=\"/casillas\" >\n                        Casillas\n      \t\t\t</Link>\n                    <Link\n                        color=\"textPrimary\"\n                        href=\"/casillas/update\"\n                        onClick={handleClick}\n                        aria-current=\"page\"\n                    >\n                        Actualizar casilla\n      \t\t\t</Link>\n                </Breadcrumbs><br />\n\n                <form onSubmit={handleSubmit(onSubmit)} className={classes.root} noValidate autoComplete=\"off\">\n                    <div className=\"card col-sm-10 col-md-10 col-lg-10 mb-5\" >\n                        <h3><div className=\"card-header \">\n                            Actualizar casilla\n                    </div></h3>\n\n                        <div className=\"card-body col-lg-12\">\n                            <h4><span className=\"text-danger text-small d-block mb-2\">{errors?.idcasilla?.message}</span></h4><TextField inputRef={register({ required: { value: true, message: \"Id casilla\" } })} name=\"id\" required id=\"id\" label=\"id\" defaultValue={casillas[0].id} style={{ display: 'none' }} />\n                            <h4><span className=\"text-danger text-small d-block mb-2\">{errors?.idrepresentantecasilla?.message}</span></h4><TextField inputRef={register({ required: { value: true, message: \"Representante obligatorio\" } })} name=\"idrepresentantecasilla\" required id=\"idrepresentantecasilla\" label=\"Representante de casilla\" defaultValue={casillas[0].idrepresentantecasilla} />\n                            <h4><span className=\"text-danger text-small d-block mb-2\">{errors?.seccionasignada?.message}</span></h4><TextField inputRef={register({ required: { value: true, message: \"Seccion obligatoria\" } })} name=\"seccionasignada\" required id=\"seccionasignada\" label=\"Seccion asignada\" defaultValue={casillas[0].seccionasignada} />\n                            <TextField inputRef={register({ required: { value: false } })} name=\"cargo\" id=\"cargo\" label=\"Cargo\" defaultValue={casillas[0].cargo} />\n                            <TextField inputRef={register({ required: { value: false } })} name=\"apertura\" id=\"apertura\" label=\"Apertura\" defaultValue={casillas[0].apertura} />\n                            <TextField\n                                inputRef={register({ required: { value: false } })}\n                                name=\"horaapertura\"\n                                id=\"horaapertura\"\n                                label=\"Hora apertura\"\n                                type=\"datetime-local\"\n                                defaultValue={casillas[0].horaapertura}\n                                className={classes.textField}\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                            />\n                        </div>\n                    </div>\n\n\n                    <div className=\"card col-sm-10 col-md-10 col-lg-10 mb-5\" >\n                        <h3><div className=\"card-header \">\n                            Flujo de votantes\n                    </div></h3>\n\n                        <div className=\"card-body col-lg-12 \">\n                            <TextField inputRef={register({ required: { value: false } })} name=\"flujo1230pm\" id=\"flujo1230pm\" label=\"Flujo 12-30\" defaultValue={casillas[0].flujo1230pm} variant=\"filled\" />\n                            <TextField inputRef={register({ required: { value: false } })} name=\"promovidos1230pm\" id=\"promovidos1230pm\" label=\"Promovidos 12-30\" defaultValue={casillas[0].promovidos1230pm} variant=\"outlined\" type=\"number\" pattern=\"[0-9]\\d*\" />\n\n                            <TextField inputRef={register({ required: { value: false } })} name=\"flujo430pm\" id=\"flujo430pm\" label=\"Flujo 16-30\" defaultValue={casillas[0].flujo430pm} variant=\"filled\" />\n                            <TextField inputRef={register({ required: { value: false } })} name=\"promovidos430pm\" id=\"promovidos430pm\" label=\"Promovidos 16-30\" defaultValue={casillas[0].promovidos430pm} variant=\"outlined\" type=\"number\" pattern=\"[0-9]\\d*\" />\n\n                            <TextField inputRef={register({ required: { value: false } })} name=\"flujo6pm\" id=\"flujo6pm\" label=\"Flujo 18\" defaultValue={casillas[0].flujo6pm} variant=\"filled\" />\n                            <TextField inputRef={register({ required: { value: false } })} name=\"promovidos6pm\" id=\"promovidos6pm\" label=\"Promovidos 18\" defaultValue={casillas[0].promovidos6pm} variant=\"outlined\" type=\"number\" pattern=\"[0-9]\\d*\" />\n                        </div>\n                    </div>\n\n\n                    <div className=\"card col-sm-10 col-md-10 col-lg-10 mb-5\" >\n                        <h3><div className=\"card-header \">\n                            Cierre de casilla\n                    </div></h3>\n\n                        <div className=\"card-body col-lg-12\">\n                            <TextField inputRef={register({ required: { value: false } })} name=\"cierre6pm\" id=\"cierre6pm\" label=\"Cierre 18\" defaultValue={casillas[0].cierre6pm} variant=\"outlined\" type=\"number\" pattern=\"[0-9]\\d*\" />\n                            <TextField\n                                inputRef={register({ required: { value: false } })}\n                                name=\"horacierre\"\n                                id=\"horacierre\"\n                                label=\"Hora cierre\"\n                                type=\"datetime-local\"\n                                defaultValue={casillas[0].horacierre}\n                                className={classes.textField}\n                                InputLabelProps={{\n                                    shrink: true,\n                                }}\n                            />\n                        </div>\n                    </div>\n\n                    <div className=\"card col-sm-10 col-md-10 col-lg-10 mb-5\" >\n                        <h3><div className=\"card-header \">\n                            Representantes de casilla\n                    </div></h3>\n\n                        <div className=\"card-body col-lg-12 \">\n                            <TextField inputRef={register({ required: { value: false } })} name=\"rpp1\" id=\"rpp1\" label=\"Representante 1\" defaultValue={casillas[0].rpp1} variant=\"filled\" />\n                            <TextField inputRef={register({ required: { value: false } })} name=\"rpp2\" id=\"rpp2\" label=\"Representante 2\" defaultValue={casillas[0].rpp2} variant=\"filled\" />\n                            <TextField inputRef={register({ required: { value: false } })} name=\"rps1\" id=\"rps1\" label=\"Suplente 1\" defaultValue={casillas[0].rps1} variant=\"filled\" />\n                        </div>\n                    </div>\n\n                    <div className=\"card col-sm-10 col-md-10 col-lg-10 mb-5\" >\n                        <h3><div className=\"card-header \">\n                            Representantes de casilla\n                    </div></h3>\n\n                        <div className=\"card-body col-lg-12\">\n                            <TextField inputRef={register({ required: { value: false } })} name=\"incidente\" id=\"incidente\" label=\"Incidente\" defaultValue={casillas[0].incidente} variant=\"filled\" />\n                            <TextField inputRef={register({ required: { value: false } })} name=\"nombre\" id=\"nombre\" label=\"Nombre\" defaultValue={casillas[0].nombre} variant=\"filled\" />\n                            <TextField inputRef={register({ required: { value: false } })} name=\"municipio\" id=\"municipio\" label=\"Municipio\" defaultValue={casillas[0].municipio} variant=\"filled\" />\n                            <TextField inputRef={register({ required: { value: false } })} name=\"localidad\" id=\"localidad\" label=\"Localidad\" defaultValue={casillas[0].localidad} variant=\"filled\" />\n                            <TextField inputRef={register({ required: { value: false } })} name=\"distrito\" id=\"distrito\" label=\"Distrito\" defaultValue={casillas[0].distrito} variant=\"filled\" />\n                        </div>\n                    </div>\n                    <button className=\"btn btn-primary\">Enviar</button>\n                </form>\n            </div >\n\n        )\n\n    }\n\n    return (\n        <div >\n            { imprimeForm()}\n        </div>\n    );\n}\n\nexport default UpdateCasilla","/home/node/aplicacion/mdc-softare-frontend/src/components/pages/Elecciones/CreateEleccion.jsx",["267"],"import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\nimport Link from '@material-ui/core/Link';\nimport { useForm } from 'react-hook-form'\nimport { createEleccionesAccion } from \"../../../redux/EleccionesDucks\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            margin: theme.spacing(1),\n            width: '25ch',\n            border: \"\",\n        },\n    },\n}));\n\n//BreadCums\nfunction handleClick(event) {\n    event.preventDefault();\n    console.info('You clicked a breadcrumb.');\n}\n\n\n\n\nconst CreateElecciones = () => {\n    //Store y redux\n    const dispatch = useDispatch();\n\n    //Handle Create\n    const handleCreate = (eleccion) => {\n        dispatch(createEleccionesAccion(eleccion));\n    };\n\n    //react-hook-forms\n    const { register, errors, handleSubmit } = useForm();\n    const onSubmit = (data, e) => {\n        handleCreate(data);\n        // e.target.reset();\n    }\n\n    const classes = useStyles();\n\n    return (\n        <div>\n            <Breadcrumbs aria-label=\"breadcrumb\">\n                <Link color=\"inherit\" href=\"/home\" >\n                    Home\n      \t\t\t</Link>\n                <Link color=\"inherit\" href=\"/elecciones\" >\n                    Eleccioness\n      \t\t\t</Link>\n                <Link\n                    color=\"textPrimary\"\n                    href=\"/elecciones/create\"\n                    onClick={handleClick}\n                    aria-current=\"page\"\n                >\n                    Crear eleccion\n      \t\t\t</Link>\n            </Breadcrumbs><br />\n\n            <form onSubmit={handleSubmit(onSubmit)} className={classes.root} noValidate autoComplete=\"off\">\n                <div className=\"card col-sm-10 col-md-10 col-lg-10 mb-5\" >\n                    <h3><div className=\"card-header \">\n                        Crear Eleccion\n                    </div></h3>\n\n                    <div className=\"card-body col-lg-12\">\n                        <h4><span className=\"text-danger text-small d-block mb-2\">{errors?.seccion?.message}</span></h4><TextField inputRef={register({ required: { value: true, message: \"Seccion obligatoria\" } })} name=\"seccion\" required id=\"seccion\" label=\"Seccion\" defaultValue=\"\" />\n                    </div>\n                </div>\n\n\n                <div className=\"card col-sm-10 col-md-10 col-lg-10 mb-5\" >\n                    <h3><div className=\"card-header \">\n                        Partidos bloque 1\n                    </div></h3>\n\n                    <div className=\"card-body col-lg-12 \">\n                        <TextField inputRef={register({ required: { value: false } })} name=\"pan\" id=\"pan\" label=\"Pan\" defaultValue=\"\" variant=\"filled\" />\n                        <TextField inputRef={register({ required: { value: false } })} name=\"pri\" id=\"pri\" label=\"Pri\" defaultValue=\"\" variant=\"filled\" />\n\n                        <TextField inputRef={register({ required: { value: false } })} name=\"prd\" id=\"prd\" label=\"Prd\" defaultValue=\"\" variant=\"filled\" />\n                        <TextField inputRef={register({ required: { value: false } })} name=\"pvem\" id=\"pvem\" label=\"Pvem\" defaultValue=\"\" variant=\"filled\" />\n\n                        <TextField inputRef={register({ required: { value: false } })} name=\"pt\" id=\"pt\" label=\"PT\" defaultValue=\"\" variant=\"filled\" />\n                    </div>\n                </div>\n\n\n                <div className=\"card col-sm-10 col-md-10 col-lg-10 mb-5\" >\n                    <h3><div className=\"card-header \">\n                        Partidos bloque 2\n                    </div></h3>\n\n                    <div className=\"card-body col-lg-12 \">\n                        <TextField inputRef={register({ required: { value: false } })} name=\"movciudadano\" id=\"movciudadano\" label=\"Mov Ciudadano\" defaultValue=\"\" variant=\"filled\" />\n                        <TextField inputRef={register({ required: { value: false } })} name=\"nuevaalianza\" id=\"nuevaalianza\" label=\"Nueva Alianza\" defaultValue=\"\" variant=\"filled\" />\n\n                        <TextField inputRef={register({ required: { value: false } })} name=\"morena\" id=\"morena\" label=\"Morena\" defaultValue=\"\" variant=\"filled\" />\n                        <TextField inputRef={register({ required: { value: false } })} name=\"encuentrosocial\" id=\"encuentrosocial\" label=\"Encuentro Social\" defaultValue=\"\" variant=\"filled\" />\n\n                        <TextField inputRef={register({ required: { value: false } })} name=\"panprd\" id=\"panprd\" label=\"Pan-PRD\" defaultValue=\"\" variant=\"filled\" />\n                    </div>\n                </div>\n\n                <div className=\"card col-sm-10 col-md-10 col-lg-10 mb-5\" >\n                    <h3><div className=\"card-header \">\n                        Partidos bloque 3\n                    </div></h3>\n\n                    <div className=\"card-body col-lg-12 \">\n                        <TextField inputRef={register({ required: { value: false } })} name=\"pripvemnuevaalianza\" id=\"pripvemnuevaalianza\" label=\"Pri-Pvem-Nueva Alianza\" defaultValue=\"\" variant=\"filled\" />\n                        <TextField inputRef={register({ required: { value: false } })} name=\"pripvem\" id=\"pripvem\" label=\"Pri Pvem\" defaultValue=\"\" variant=\"filled\" />\n\n                        <TextField inputRef={register({ required: { value: false } })} name=\"prinuevaalianza\" id=\"prinuevaalianza\" label=\"Pri-Nueva Alianza\" defaultValue=\"\" variant=\"filled\" />\n                        <TextField inputRef={register({ required: { value: false } })} name=\"pvemnuevaalianza\" id=\"pvemnuevaalianza\" label=\"Pvem-Nueva Alianza\" defaultValue=\"\" variant=\"filled\" />\n\n                        <TextField inputRef={register({ required: { value: false } })} name=\"candidatosnoregistrados\" id=\"candidatosnoregistrados\" label=\"Candidatos No Reg.\" defaultValue=\"\" variant=\"filled\" />\n                    </div>\n                </div>\n\n                <div className=\"card col-sm-10 col-md-10 col-lg-10 mb-5\" >\n                    <h3><div className=\"card-header \">\n                        Totales\n                    </div></h3>\n\n                    <div className=\"card-body col-lg-12\">\n                        <TextField inputRef={register({ required: { value: false } })} name=\"nulos\" id=\"nulos\" label=\"Nulos\" defaultValue=\"\" variant=\"filled\" />\n                        <TextField inputRef={register({ required: { value: false } })} name=\"total\" id=\"total\" label=\"Total\" defaultValue=\"\" variant=\"filled\" />\n                    </div>\n                </div>\n                <button className=\"btn btn-primary\">Enviar</button>\n            </form>\n        </div >\n    );\n}\n\nexport default CreateElecciones","/home/node/aplicacion/mdc-softare-frontend/src/components/pages/Elecciones/UpdateEleccion.jsx",["268","269"],"import React, { useEffect, useState } from \"react\";\nimport TextField from '@material-ui/core/TextField';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useParams } from 'react-router-dom'\nimport { makeStyles } from '@material-ui/core/styles';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\nimport Link from '@material-ui/core/Link';\nimport { useForm } from 'react-hook-form'\nimport { updateEleccionesAccion, getEleccionesAccion } from \"../../../redux/EleccionesDucks\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& .MuiTextField-root': {\n            margin: theme.spacing(1),\n            width: '25ch',\n            border: \"\",\n        },\n    },\n}));\n\n\nconst UpdateElecciones = () => {\n    //Store y configuracion REDUX\n    const dispatch = useDispatch();\n    const elecciones = useSelector((store) => store.elecciones.array);\n    const reload = useSelector((store) => store.elecciones.reload);\n\n    //Recibimos parametros\n    const { id } = useParams()\n\n    //eleccion\n    const eleccion = {\n        id: id,\n    };\n\n    //Hacemos carga inicial\n    useEffect(() => {\n        eleccion.id = id;\n        dispatch(getEleccionesAccion(eleccion));\n    }, []);\n\n    //Verificamos si hubo cambios\n    if (reload) {\n        eleccion.id = id;\n        dispatch(getEleccionesAccion(eleccion));\n    }\n\n    //BreadCums\n    function handleClick(event) {\n        event.preventDefault();\n        console.info('You clicked a breadcrumb.');\n    }\n\n    //Handle update\n    const handleupdate = (data) => {\n        dispatch(updateEleccionesAccion(data));\n    };\n\n    //react-hook-forms\n    const { register, errors, handleSubmit } = useForm();\n    const onSubmit = (data, e) => {\n        handleupdate(data);\n        e.target.reset();\n    }\n\n    const classes = useStyles();\n\n    //Form\n    const imprimeForm = () => {\n        if (elecciones.length !== 1) {\n            return (\n                <div>\n                    < h5 > Cargando... </h5 >\n                </div>\n            )\n        }\n        return (\n\n            <div>\n                <Breadcrumbs aria-label=\"breadcrumb\">\n                    <Link color=\"inherit\" href=\"/home\" >\n                        Home\n      \t\t\t</Link>\n                    <Link color=\"inherit\" href=\"/elecciones\" >\n                        Eleccioness\n      \t\t\t</Link>\n                    <Link\n                        color=\"textPrimary\"\n                        href=\"/elecciones/create\"\n                        onClick={handleClick}\n                        aria-current=\"page\"\n                    >\n                        Actualizar eleccion\n      \t\t\t</Link>\n                </Breadcrumbs><br />\n\n                <form onSubmit={handleSubmit(onSubmit)} className={classes.root} noValidate autoComplete=\"off\">\n                    <div className=\"card col-sm-10 col-md-10 col-lg-10 mb-5\" >\n                        <h3><div className=\"card-header \">\n                            Actualizar Eleccion\n                    </div></h3>\n\n                        <div className=\"card-body col-lg-12\">\n                            <h4><span className=\"text-danger text-small d-block mb-2\">{errors?.id?.message}</span></h4><TextField inputRef={register({ required: { value: true, message: \"Id elecciones\" } })} name=\"id\" required id=\"id\" label=\"id\" defaultValue={elecciones[0].id} style={{ display: 'none' }} />\n                            <h4><span className=\"text-danger text-small d-block mb-2\">{errors?.seccion?.message}</span></h4><TextField inputRef={register({ required: { value: true, message: \"Seccion obligatoria\" } })} name=\"seccion\" required id=\"seccion\" label=\"Seccion\" defaultValue={elecciones[0].seccion} />\n                        </div>\n                    </div>\n\n\n                    <div className=\"card col-sm-10 col-md-10 col-lg-10 mb-5\" >\n                        <h3><div className=\"card-header \">\n                            Partidos bloque 1\n                    </div></h3>\n\n                        <div className=\"card-body col-lg-12 \">\n                            <TextField inputRef={register({ required: { value: false } })} name=\"pan\" id=\"pan\" label=\"Pan\" defaultValue={elecciones[0].pan} variant=\"filled\" />\n                            <TextField inputRef={register({ required: { value: false } })} name=\"pri\" id=\"pri\" label=\"Pri\" defaultValue={elecciones[0].pri} variant=\"filled\" />\n\n                            <TextField inputRef={register({ required: { value: false } })} name=\"prd\" id=\"prd\" label=\"Prd\" defaultValue={elecciones[0].prd} variant=\"filled\" />\n                            <TextField inputRef={register({ required: { value: false } })} name=\"pvem\" id=\"pvem\" label=\"Pvem\" defaultValue={elecciones[0].pvem} variant=\"filled\" />\n\n                            <TextField inputRef={register({ required: { value: false } })} name=\"pt\" id=\"pt\" label=\"PT\" defaultValue={elecciones[0].pt} variant=\"filled\" />\n                        </div>\n                    </div>\n\n\n                    <div className=\"card col-sm-10 col-md-10 col-lg-10 mb-5\" >\n                        <h3><div className=\"card-header \">\n                            Partidos bloque 2\n                    </div></h3>\n\n                        <div className=\"card-body col-lg-12 \">\n                            <TextField inputRef={register({ required: { value: false } })} name=\"movciudadano\" id=\"movciudadano\" label=\"Mov Ciudadano\" defaultValue={elecciones[0].movciudadano} variant=\"filled\" />\n                            <TextField inputRef={register({ required: { value: false } })} name=\"nuevaalianza\" id=\"nuevaalianza\" label=\"Nueva Alianza\" defaultValue={elecciones[0].nuevaalianza} variant=\"filled\" />\n\n                            <TextField inputRef={register({ required: { value: false } })} name=\"morena\" id=\"morena\" label=\"Morena\" defaultValue={elecciones[0].morena} variant=\"filled\" />\n                            <TextField inputRef={register({ required: { value: false } })} name=\"encuentrosocial\" id=\"encuentrosocial\" label=\"Encuentro Social\" defaultValue={elecciones[0].encuentrosocial} variant=\"filled\" />\n\n                            <TextField inputRef={register({ required: { value: false } })} name=\"panprd\" id=\"panprd\" label=\"Pan-PRD\" defaultValue={elecciones[0].panprd} variant=\"filled\" />\n                        </div>\n                    </div>\n\n                    <div className=\"card col-sm-10 col-md-10 col-lg-10 mb-5\" >\n                        <h3><div className=\"card-header \">\n                            Partidos bloque 3\n                    </div></h3>\n\n                        <div className=\"card-body col-lg-12 \">\n                            <TextField inputRef={register({ required: { value: false } })} name=\"pripvemnuevaalianza\" id=\"pripvemnuevaalianza\" label=\"Pri-Pvem-Nueva Alianza\" defaultValue={elecciones[0].pripvemnuevaalianza} variant=\"filled\" />\n                            <TextField inputRef={register({ required: { value: false } })} name=\"pripvem\" id=\"pripvem\" label=\"Pri Pvem\" defaultValue={elecciones[0].pripvem} variant=\"filled\" />\n\n                            <TextField inputRef={register({ required: { value: false } })} name=\"prinuevaalianza\" id=\"prinuevaalianza\" label=\"Pri-Nueva Alianza\" defaultValue={elecciones[0].prinuevaalianza} variant=\"filled\" />\n                            <TextField inputRef={register({ required: { value: false } })} name=\"pvemnuevaalianza\" id=\"pvemnuevaalianza\" label=\"Pvem-Nueva Alianza\" defaultValue={elecciones[0].pvemnuevaalianza} variant=\"filled\" />\n\n                            <TextField inputRef={register({ required: { value: false } })} name=\"candidatosnoregistrados\" id=\"candidatosnoregistrados\" label=\"Candidatos No Reg.\" defaultValue={elecciones[0].candidatosnoregistrados} variant=\"filled\" />\n                        </div>\n                    </div>\n\n                    <div className=\"card col-sm-10 col-md-10 col-lg-10 mb-5\" >\n                        <h3><div className=\"card-header \">\n                            Totales\n                    </div></h3>\n\n                        <div className=\"card-body col-lg-12\">\n                            <TextField inputRef={register({ required: { value: false } })} name=\"nulos\" id=\"nulos\" label=\"Nulos\" defaultValue={elecciones[0].nulos} variant=\"filled\" />\n                            <TextField inputRef={register({ required: { value: false } })} name=\"total\" id=\"total\" label=\"Total\" defaultValue={elecciones[0].total} variant=\"filled\" />\n                        </div>\n                    </div>\n                    <button className=\"btn btn-primary\">Enviar</button>\n                </form>\n            </div >\n\n        )\n\n    }\n\n    return (\n        <div >\n            { imprimeForm()}\n        </div>\n    );\n}\n\nexport default UpdateElecciones","/home/node/aplicacion/mdc-softare-frontend/src/components/ListIcons.jsx",["270","271","272"],"import React, { Fragment } from 'react'\nimport { makeStyles } from '@material-ui/core'\nimport { List, ListItem, ListItemIcon, ListItemText, Divider, } from '@material-ui/core'\nimport { Home, AccountBox, BarChart, AccountBalance, Error, FindInPage, BorderColor, HowToVote, RecentActors } from '@material-ui/icons/'\nimport { NavLink } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n        maxWidth: 360,\n        backgroundColor: theme.palette.background.paper,\n    },\n    nested: {\n        paddingLeft: theme.spacing(4),\n    },\n}));\n\nconst ListIcons = () => {\n    const classes = useStyles();\n\n    //Imprime Iconos\n    const imprimeIconos = () => {\n        if (localStorage.getItem(\"token-centinela\") === null) {\n            return (\n                <div>\n                </div>\n            )\n        }\n        return (\n            <div>\n                <List component=\"nav\" className={classes.root}>\n                    <NavLink\n                        className=\"tags\"\n                        activeStyle={{ color: \"#1e88e5\", fontWeight: \"bold\", }}\n                        style={{ color: \"#424242\", textDecoration: 'none' }}\n                        to={\"/home\"}\n                    >\n                        <ListItem button>\n                            <ListItemIcon>\n                                <Home />\n                            </ListItemIcon>\n                            <ListItemText primary='Home' />\n                        </ListItem>\n                    </NavLink>\n                    <Divider />\n                    <NavLink\n                        className=\"tags\"\n                        activeStyle={{ color: \"#1e88e5\" }}\n                        style={{ color: \"#424242\", textDecoration: 'none' }}\n                        to={\"/capturavotos\"}\n                    >\n                        <ListItem button>\n                            <ListItemIcon>\n                                <HowToVote />\n                            </ListItemIcon>\n                            <ListItemText primary='Captura de votos' />\n                        </ListItem>\n                    </NavLink>\n                    <Divider />\n                    <NavLink\n                        className=\"tags\"\n                        activeStyle={{ color: \"#1e88e5\" }}\n                        style={{ color: \"#424242\", textDecoration: 'none' }}\n                        to={\"/casillas\"}\n                    >\n                        <ListItem button>\n                            <ListItemIcon>\n                                <AccountBalance />\n                            </ListItemIcon>\n                            <ListItemText primary='Casillas' />\n                        </ListItem>\n                    </NavLink>\n\n                    <Divider />\n                    <NavLink\n                        className=\"tags\"\n                        activeStyle={{ color: \"#1e88e5\" }}\n                        style={{ color: \"#424242\", textDecoration: 'none' }}\n                        to={\"/elecciones\"}\n                    >\n                        <ListItem button>\n                            <ListItemIcon>\n                                <BorderColor />\n                            </ListItemIcon>\n                            <ListItemText primary='Elecciones' />\n                        </ListItem>\n                    </NavLink>\n                    <Divider />\n                    <NavLink\n                        className=\"tags\"\n                        activeStyle={{ color: \"#1e88e5\" }}\n                        style={{ color: \"#424242\", textDecoration: 'none' }}\n                        to={\"/promovidos\"}\n                    >\n                        <ListItem button>\n                            <ListItemIcon>\n                                <AccountBox />\n                            </ListItemIcon>\n                            <ListItemText primary='Total promovidos' />\n                        </ListItem>\n                    </NavLink>\n                    <Divider />\n                    <NavLink\n                        className=\"tags\"\n                        activeStyle={{ color: \"#1e88e5\" }}\n                        style={{ color: \"#424242\", textDecoration: 'none' }}\n                        to={\"/gestionarpromovidos\"}\n                    >\n                        <ListItem button>\n                            <ListItemIcon>\n                                <RecentActors />\n                            </ListItemIcon>\n                            <ListItemText primary='Gestionar promovidos' />\n                        </ListItem>\n                    </NavLink>\n                    <Divider />\n                    {/* <NavLink\n                        className=\"tags\"\n                        activeStyle={{ color: \"#1e88e5\" }}\n                        style={{ color: \"#424242\", textDecoration: 'none' }}\n                        to={\"/reportesrgs\"}\n                    >\n                        <ListItem button>\n                            <ListItemIcon>\n                                <FindInPage />\n                            </ListItemIcon>\n                            <ListItemText primary='Reportes rgs' />\n                        </ListItem>\n                    </NavLink> */}\n\n                    {/* <NavLink\n                        className=\"tags\"\n                        activeStyle={{ color: \"#1e88e5\" }}\n                        style={{ color: \"#424242\", textDecoration: 'none' }}\n                        to={\"/graficas\"}\n                    >\n                        <ListItem button>\n                            <ListItemIcon>\n                                <BarChart />\n                            </ListItemIcon>\n                            <ListItemText primary='Graficas' />\n                        </ListItem>\n                    </NavLink> */}\n                    {/* <Divider />\n                    <NavLink\n                        className=\"tags\"\n                        activeStyle={{ color: \"#1e88e5\" }}\n                        style={{ color: \"#424242\", textDecoration: 'none' }}\n                        to={\"/incidentes\"}\n                    >\n                        <ListItem button>\n                            <ListItemIcon>\n                                <Error />\n                            </ListItemIcon>\n                            <ListItemText primary='Incidentes Casillas' />\n                        </ListItem>\n                    </NavLink> */}\n                </List>\n            </div>\n        )\n    }\n\n    return (\n        <Fragment>\n            {imprimeIconos()}\n        </Fragment>\n    )\n}\n\nexport default ListIcons\n","/home/node/aplicacion/mdc-softare-frontend/src/components/charts/PieChart.jsx",[],"/home/node/aplicacion/mdc-softare-frontend/src/components/utils/MaterialTableCpt.jsx",[],"/home/node/aplicacion/mdc-softare-frontend/src/components/utils/MenuButtonListCpt.jsx",["273"],"import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { useHistory } from \"react-router-dom\";\n\nconst MenuButtonListCpt = (props) => {\n\tconst [anchorEl, setAnchorEl] = React.useState(null);\n\tconst history = useHistory();\n\n\tconst handleClick = (event) => {\n\t\tsetAnchorEl(event.currentTarget);\n\t};\n\n\tconst handleAction = (path) => {\n\t\thistory.push(path);\n\t\thandleClose();\n\t};\n\n\tconst handleClose = () => {\n\t\tsetAnchorEl(null);\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<Button aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick}>\n\t\t\t\tMenu\n\t\t\t</Button>\n\t\t\t<Menu\n\t\t\t\tid=\"simple-menu\"\n\t\t\t\tanchorEl={anchorEl}\n\t\t\t\tkeepMounted\n\t\t\t\topen={Boolean(anchorEl)}\n\t\t\t\tonClose={handleClose}\n\t\t\t>\n\t\t\t\t{\n\t\t\t\t\tprops.acciones.map(function (item, index) {\n\t\t\t\t\t\tif (item.action === \"get\") {\n\t\t\t\t\t\t\treturn <MenuItem key={index} onClick={() => handleAction(item.path)} > {item.title}</MenuItem>;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (item.action === \"create\") {\n\t\t\t\t\t\t\treturn <MenuItem key={index} onClick={() => handleAction(item.path)} > {item.title}</MenuItem>;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (item.action === \"update\") {\n\t\t\t\t\t\t\treturn <MenuItem key={index} onClick={() => handleAction(item.path)} > {item.title}</MenuItem>;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (item.action === \"delete\") {\n\t\t\t\t\t\t\treturn <MenuItem key={index} onClick={() => item.handle(item.rowdata)}>{item.title}</MenuItem>;\n\t\t\t\t\t\t}\n\n\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t\t<MenuItem key=\"id-close\" onClick={handleClose}>cerrar</MenuItem>\n\t\t\t</Menu>\n\t\t</div >\n\t);\n}\n\nexport default MenuButtonListCpt\n","/home/node/aplicacion/mdc-softare-frontend/src/components/utils/DataGridCpt.jsx",[],"/home/node/aplicacion/mdc-softare-frontend/src/components/utils/MaterialTableEditableCpt.jsx",["274","275"],"import React from 'react'\nimport MaterialTable from \"material-table\";\nimport { makeStyles } from '@material-ui/core'\n\nimport { forwardRef } from 'react';\n\nimport AddBox from '@material-ui/icons/AddBox';\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\nimport Check from '@material-ui/icons/Check';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport Clear from '@material-ui/icons/Clear';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport FilterList from '@material-ui/icons/FilterList';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport Remove from '@material-ui/icons/Remove';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport Search from '@material-ui/icons/Search';\nimport ViewColumn from '@material-ui/icons/ViewColumn';\n\nconst tableIcons = {\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n    DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n    PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n    SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n    ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\n};\n\n\n\nconst styles = makeStyles(theme => ({\n    root: {\n        width: \"100%\",\n        marginTop: theme.spacing(3),\n        overflowX: \"auto\"\n    },\n    table: {\n        width: \"100%\",\n        minWidth: 700\n    }\n\n}))\nconst MaterialTableEditableCpt = (props) => {\n    const classes = styles()\n    const { useState } = React;\n    const [data, setData] = useState(props.data);\n    return (\n\n        <div style={{ height: 400, width: '70%' }}>\n            <MaterialTable\n                title=\"Gestion de promovidos\"\n                columns={props.columns}\n                icons={tableIcons}\n                options={{\n                    sorting: true\n                }}\n                data={props.data}\n                options={{\n                    rowStyle: {\n                        fontSize: 12,\n                    },\n                }}\n                editable={{\n                    onRowAdd: newData =>\n                        new Promise((resolve, reject) => {\n                            setTimeout(() => {\n                                props.handleCreate(newData);\n                                setData([...data, newData]);\n                                resolve();\n                            }, 1000)\n                        }),\n                    onRowUpdate: (newData, oldData) =>\n                        new Promise((resolve, reject) => {\n                            setTimeout(() => {\n                                const dataUpdate = [...data];\n                                const index = oldData.tableData.id;\n                                dataUpdate[index] = newData;\n                                props.handleUpdate(newData);\n                                setData([...dataUpdate]);\n                                resolve();\n                            }, 1000)\n                        }),\n                    onRowDelete: oldData =>\n                        new Promise((resolve, reject) => {\n                            setTimeout(() => {\n                                const dataDelete = [...data];\n                                const index = oldData.tableData.id;\n                                dataDelete.splice(index, 1);\n                                props.handleDelete(oldData);\n                                setData([...dataDelete]);\n                                resolve()\n                            }, 1000)\n                        }),\n                }}\n            />\n        </div>\n\n    )\n}\n\nexport default MaterialTableEditableCpt","/home/node/aplicacion/mdc-softare-frontend/src/components/charts/PolarChart.jsx",[],"/home/node/aplicacion/mdc-softare-frontend/src/components/charts/MultiAxisChart.jsx",["276","277"],"import React from 'react';\nimport { Chart } from 'primereact/chart';\n\nconst MultiAxis = (props) => {\n    const multiAxisData = {\n        labels: props.tags,\n        datasets: [{\n            label: props.label,\n            backgroundColor: props.colors,\n            yAxisID: 'y-axis-1',\n            data: props.data\n        }]\n    };\n\n    const getLightTheme = () => {\n        let basicOptions = {\n            legend: {\n                labels: {\n                    fontColor: '#495057'\n                }\n            },\n            scales: {\n                xAxes: [{\n                    ticks: {\n                        fontColor: '#495057'\n                    }\n                }],\n                yAxes: [{\n                    ticks: {\n                        fontColor: '#495057'\n                    }\n                }]\n            }\n        };\n\n        let stackedOptions = {\n            tooltips: {\n                mode: 'index',\n                intersect: false\n            },\n            responsive: true,\n            scales: {\n                xAxes: [{\n                    stacked: true,\n                    ticks: {\n                        fontColor: '#495057'\n                    },\n                    gridLines: {\n                        color: '#ebedef'\n                    }\n                }],\n                yAxes: [{\n                    stacked: true,\n                    ticks: {\n                        fontColor: '#495057'\n                    },\n                    gridLines: {\n                        color: '#ebedef'\n                    }\n                }]\n            },\n            legend: {\n                labels: {\n                    fontColor: '#495057'\n                }\n            }\n        };\n\n        let multiAxisOptions = {\n            responsive: true,\n            tooltips: {\n                mode: 'index',\n                intersect: true\n            },\n            scales: {\n                xAxes: [{\n                    ticks: {\n                        fontColor: '#495057'\n                    },\n                    gridLines: {\n                        color: '#ebedef'\n                    }\n                }],\n                yAxes: [{\n                    type: 'linear',\n                    display: true,\n                    position: 'left',\n                    id: 'y-axis-1',\n                    ticks: {\n                        min: 0,\n                        max: Math.max.apply(null, props.data),\n                        fontColor: '#495057'\n                    },\n                    gridLines: {\n                        color: '#ebedef'\n                    }\n                },\n                {\n                    type: 'linear',\n                    display: true,\n                    position: 'right',\n                    id: 'y-axis-2',\n                    gridLines: {\n                        drawOnChartArea: false,\n                        color: '#ebedef'\n                    },\n                    ticks: {\n                        min: 0,\n                        max: Math.max.apply(null, props.data),\n                        fontColor: '#495057'\n                    }\n                }]\n            },\n            legend: {\n                labels: {\n                    fontColor: '#495057'\n                }\n            }\n        };\n\n        return {\n            basicOptions,\n            stackedOptions,\n            multiAxisOptions\n        }\n    }\n\n    const { basicOptions, multiAxisOptions, stackedOptions } = getLightTheme();\n\n    return (\n        <div>\n            <div className=\"card\">\n                <Chart type=\"bar\" data={multiAxisData} options={multiAxisOptions} />\n            </div>\n        </div>\n    )\n}\n\nexport default MultiAxis","/home/node/aplicacion/mdc-softare-frontend/src/components/charts/HorizontalChart.jsx",["278","279"],"\nimport React from 'react';\nimport { Chart } from 'primereact/chart';\n\nconst BarChartDemo = (props) => {\n    const novotados = props.meta;\n    const votados = props.votados;\n\n    const basicData = {\n        labels: ['Total votos:'],\n        datasets: [\n            {\n                label: props.votados,\n                backgroundColor: \"#81C784\",\n                data: [props.votados]\n            },\n            {\n                label: [props.meta - props.votados],\n                backgroundColor: \"#ba000d\",\n                data: [props.meta - props.votados]\n            }\n        ]\n    };\n\n\n\n    const getLightTheme = () => {\n        let basicOptions = {\n            legend: {\n                labels: {\n                    fontColor: '#495057'\n                }\n            },\n            scales: {\n                xAxes: [{\n                    ticks: {\n                        fontColor: '#495057'\n                    }\n                }],\n                yAxes: [{\n                    ticks: {\n                        fontColor: '#495057'\n                    }\n                }]\n            }\n        };\n\n        let stackedOptions = {\n            tooltips: {\n                mode: 'index',\n                intersect: false\n            },\n            responsive: true,\n            scales: {\n                xAxes: [{\n                    stacked: true,\n                    ticks: {\n                        fontColor: '#495057'\n                    },\n                    gridLines: {\n                        color: '#ebedef'\n                    }\n                }],\n                yAxes: [{\n                    stacked: true,\n                    ticks: {\n                        fontColor: '#495057'\n                    },\n                    gridLines: {\n                        color: '#ebedef'\n                    }\n                }]\n            },\n            legend: {\n                labels: {\n                    fontColor: '#495057'\n                }\n            }\n        };\n\n        let multiAxisOptions = {\n            responsive: true,\n            tooltips: {\n                mode: 'index',\n                intersect: true\n            },\n            scales: {\n                xAxes: [{\n                    ticks: {\n                        fontColor: '#495057'\n                    },\n                    gridLines: {\n                        color: '#ebedef'\n                    }\n                }],\n                yAxes: [{\n                    type: 'linear',\n                    display: true,\n                    position: 'left',\n                    id: 'y-axis-1',\n                    ticks: {\n                        min: 0,\n                        max: Math.max(props.meta, props.votados),\n                        fontColor: '#495057'\n                    },\n                    gridLines: {\n                        color: '#ebedef'\n                    }\n                },\n                {\n                    type: 'linear',\n                    display: true,\n                    position: 'right',\n                    id: 'y-axis-2',\n                    gridLines: {\n                        drawOnChartArea: false,\n                        color: '#ebedef'\n                    },\n                    ticks: {\n                        min: 0,\n                        max: Math.max(props.meta, props.votados),\n                        fontColor: '#495057'\n                    }\n                }]\n            },\n            legend: {\n                labels: {\n                    fontColor: '#495057'\n                }\n            }\n        };\n\n        return {\n            basicOptions,\n            stackedOptions,\n            multiAxisOptions\n        }\n    }\n\n    const { basicOptions } = getLightTheme();\n\n    return (\n        <div>\n            <div className=\"card\">\n                <h1>{props.tag}{props.meta}</h1>\n                <Chart type=\"horizontalBar\" data={basicData} options={basicOptions} />\n            </div>\n        </div>\n    )\n}\n\nexport default BarChartDemo","/home/node/aplicacion/mdc-softare-frontend/src/components/charts/ComboChart.jsx",[],"/home/node/aplicacion/mdc-softare-frontend/src/components/pages/ReportesRgs.jsx",["280"],"import React, { useEffect } from \"react\";\nimport { obtenerReportesRgsAccion } from \"../../redux/ReportesRgsDucks\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport DataGridCpt from \"../utils/DataGridCpt\";\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\nimport Link from '@material-ui/core/Link';\n\nconst ReportesRgs = () => {\n    //Configuraciones iniciales\n    const dispatch = useDispatch();\n    const reportesRgs = useSelector((store) => store.reportesRgs.array);\n\n    //BreadCums\n    function handleClick(event) {\n        event.preventDefault();\n        console.info('You clicked a breadcrumb.');\n    }\n\n    //Hacemos carga inicial\n    useEffect(() => {\n        dispatch(obtenerReportesRgsAccion());\n    }, []);\n\n    // Columnas\n    const columns = [\n        {\n            field: \"id\",\n            headerName: \"IDREPORTESRGS\",\n            width: 180,\n        },\n        {\n            field: \"seccion\",\n            headerName: \"SECCION\",\n            width: 180,\n        },\n        {\n            field: \"idlistanom\",\n            headerName: \"IDLISTANOM\",\n            width: 180,\n        },\n        {\n            field: \"puesto\",\n            headerName: \"PUESTO\",\n            width: 180,\n        },\n        {\n            field: \"nombre\",\n            headerName: \"NOMBRE\",\n            width: 180,\n        },\n        {\n            field: \"telefono\",\n            headerName: \"TELEFONO\",\n            width: 180,\n        },\n        {\n            field: \"claveelector\",\n            headerName: \"CLAVEELECTOR\",\n            width: 180,\n        },\n        {\n            field: \"observaciones\",\n            headerName: \"OBSERVACIONES\",\n            width: 180,\n        }\n    ];\n\n    return (\n        <div>\n            <Breadcrumbs aria-label=\"breadcrumb\">\n                <Link color=\"inherit\" href=\"/home\" >\n                    Home\n      \t\t\t</Link>\n                <Link\n                    color=\"textPrimary\"\n                    href=\"/casillas\"\n                    onClick={handleClick}\n                    aria-current=\"page\"\n                >\n                    Reportes rgs\n      \t\t\t</Link>\n            </Breadcrumbs><br />\n\n            <DataGridCpt columns={columns} actArray={reportesRgs} />\n        </div >\n    )\n}\n\nexport default ReportesRgs","/home/node/aplicacion/mdc-softare-frontend/src/redux/GraficasPorRolDucks.js",[],"/home/node/aplicacion/mdc-softare-frontend/src/redux/GraficasTotalSeccionDucks.js",[],"/home/node/aplicacion/mdc-softare-frontend/src/redux/GraficasEstructuraDucks.js",[],{"ruleId":"281","replacedBy":"282"},{"ruleId":"283","replacedBy":"284"},{"ruleId":"285","severity":1,"message":"286","line":10,"column":8,"nodeType":"287","messageId":"288","endLine":10,"endColumn":16},{"ruleId":"285","severity":1,"message":"289","line":11,"column":8,"nodeType":"287","messageId":"288","endLine":11,"endColumn":26},{"ruleId":"285","severity":1,"message":"290","line":12,"column":8,"nodeType":"287","messageId":"288","endLine":12,"endColumn":19},{"ruleId":"285","severity":1,"message":"291","line":114,"column":9,"nodeType":"287","messageId":"288","endLine":114,"endColumn":12},{"ruleId":"285","severity":1,"message":"291","line":185,"column":9,"nodeType":"287","messageId":"288","endLine":185,"endColumn":12},{"ruleId":"285","severity":1,"message":"291","line":257,"column":9,"nodeType":"287","messageId":"288","endLine":257,"endColumn":12},{"ruleId":"285","severity":1,"message":"291","line":317,"column":9,"nodeType":"287","messageId":"288","endLine":317,"endColumn":12},{"ruleId":"292","severity":1,"message":"293","line":56,"column":23,"nodeType":"294","messageId":"295","endLine":56,"endColumn":24},{"ruleId":"296","severity":1,"message":"297","line":61,"column":104,"nodeType":"298","messageId":"299","endLine":61,"endColumn":106},{"ruleId":"285","severity":1,"message":"300","line":1,"column":28,"nodeType":"287","messageId":"288","endLine":1,"endColumn":37},{"ruleId":"285","severity":1,"message":"301","line":20,"column":8,"nodeType":"287","messageId":"288","endLine":20,"endColumn":19},{"ruleId":"302","severity":1,"message":"303","line":62,"column":8,"nodeType":"304","endLine":62,"endColumn":10,"suggestions":"305"},{"ruleId":"306","severity":1,"message":"307","line":66,"column":28,"nodeType":"308","messageId":"309","endLine":66,"endColumn":30},{"ruleId":"306","severity":1,"message":"307","line":74,"column":28,"nodeType":"308","messageId":"309","endLine":74,"endColumn":30},{"ruleId":"306","severity":1,"message":"307","line":83,"column":25,"nodeType":"308","messageId":"309","endLine":83,"endColumn":27},{"ruleId":"306","severity":1,"message":"307","line":91,"column":25,"nodeType":"308","messageId":"309","endLine":91,"endColumn":27},{"ruleId":"306","severity":1,"message":"307","line":100,"column":25,"nodeType":"308","messageId":"309","endLine":100,"endColumn":27},{"ruleId":"306","severity":1,"message":"307","line":111,"column":23,"nodeType":"308","messageId":"309","endLine":111,"endColumn":25},{"ruleId":"306","severity":1,"message":"307","line":119,"column":23,"nodeType":"308","messageId":"309","endLine":119,"endColumn":25},{"ruleId":"306","severity":1,"message":"307","line":128,"column":23,"nodeType":"308","messageId":"309","endLine":128,"endColumn":25},{"ruleId":"306","severity":1,"message":"307","line":139,"column":26,"nodeType":"308","messageId":"309","endLine":139,"endColumn":28},{"ruleId":"306","severity":1,"message":"307","line":147,"column":26,"nodeType":"308","messageId":"309","endLine":147,"endColumn":28},{"ruleId":"306","severity":1,"message":"307","line":156,"column":26,"nodeType":"308","messageId":"309","endLine":156,"endColumn":28},{"ruleId":"302","severity":1,"message":"310","line":35,"column":5,"nodeType":"304","endLine":35,"endColumn":7,"suggestions":"311"},{"ruleId":"285","severity":1,"message":"312","line":9,"column":8,"nodeType":"287","messageId":"288","endLine":9,"endColumn":25},{"ruleId":"285","severity":1,"message":"313","line":19,"column":11,"nodeType":"287","messageId":"288","endLine":19,"endColumn":17},{"ruleId":"302","severity":1,"message":"310","line":40,"column":8,"nodeType":"304","endLine":40,"endColumn":10,"suggestions":"314"},{"ruleId":"285","severity":1,"message":"300","line":1,"column":28,"nodeType":"287","messageId":"288","endLine":1,"endColumn":37},{"ruleId":"315","severity":1,"message":"316","line":40,"column":9,"nodeType":"317","messageId":"318","endLine":43,"endColumn":19},{"ruleId":"315","severity":1,"message":"316","line":45,"column":9,"nodeType":"319","messageId":"318","endLine":50,"endColumn":19},{"ruleId":"315","severity":1,"message":"316","line":52,"column":9,"nodeType":"319","messageId":"318","endLine":52,"endColumn":47},{"ruleId":"302","severity":1,"message":"303","line":53,"column":8,"nodeType":"304","endLine":53,"endColumn":10,"suggestions":"320"},{"ruleId":"306","severity":1,"message":"307","line":58,"column":25,"nodeType":"308","messageId":"309","endLine":58,"endColumn":27},{"ruleId":"306","severity":1,"message":"307","line":66,"column":25,"nodeType":"308","messageId":"309","endLine":66,"endColumn":27},{"ruleId":"306","severity":1,"message":"307","line":75,"column":25,"nodeType":"308","messageId":"309","endLine":75,"endColumn":27},{"ruleId":"306","severity":1,"message":"307","line":86,"column":23,"nodeType":"308","messageId":"309","endLine":86,"endColumn":25},{"ruleId":"306","severity":1,"message":"307","line":94,"column":23,"nodeType":"308","messageId":"309","endLine":94,"endColumn":25},{"ruleId":"306","severity":1,"message":"307","line":103,"column":23,"nodeType":"308","messageId":"309","endLine":103,"endColumn":25},{"ruleId":"306","severity":1,"message":"307","line":114,"column":26,"nodeType":"308","messageId":"309","endLine":114,"endColumn":28},{"ruleId":"306","severity":1,"message":"307","line":122,"column":26,"nodeType":"308","messageId":"309","endLine":122,"endColumn":28},{"ruleId":"306","severity":1,"message":"307","line":131,"column":26,"nodeType":"308","messageId":"309","endLine":131,"endColumn":28},{"ruleId":"302","severity":1,"message":"321","line":49,"column":8,"nodeType":"304","endLine":49,"endColumn":10,"suggestions":"322"},{"ruleId":"285","severity":1,"message":"323","line":1,"column":28,"nodeType":"287","messageId":"288","endLine":1,"endColumn":36},{"ruleId":"285","severity":1,"message":"324","line":4,"column":5,"nodeType":"287","messageId":"288","endLine":4,"endColumn":21},{"ruleId":"302","severity":1,"message":"310","line":53,"column":8,"nodeType":"304","endLine":53,"endColumn":10,"suggestions":"325"},{"ruleId":"302","severity":1,"message":"303","line":166,"column":8,"nodeType":"304","endLine":166,"endColumn":10,"suggestions":"326"},{"ruleId":"302","severity":1,"message":"327","line":42,"column":8,"nodeType":"304","endLine":42,"endColumn":10,"suggestions":"328"},{"ruleId":"285","severity":1,"message":"329","line":1,"column":17,"nodeType":"287","messageId":"288","endLine":1,"endColumn":25},{"ruleId":"285","severity":1,"message":"330","line":7,"column":8,"nodeType":"287","messageId":"288","endLine":7,"endColumn":24},{"ruleId":"285","severity":1,"message":"331","line":8,"column":8,"nodeType":"287","messageId":"288","endLine":8,"endColumn":16},{"ruleId":"285","severity":1,"message":"332","line":10,"column":8,"nodeType":"287","messageId":"288","endLine":10,"endColumn":12},{"ruleId":"285","severity":1,"message":"333","line":55,"column":11,"nodeType":"287","messageId":"288","endLine":55,"endColumn":21},{"ruleId":"285","severity":1,"message":"334","line":56,"column":11,"nodeType":"287","messageId":"288","endLine":56,"endColumn":17},{"ruleId":"285","severity":1,"message":"324","line":4,"column":42,"nodeType":"287","messageId":"288","endLine":4,"endColumn":58},{"ruleId":"302","severity":1,"message":"335","line":36,"column":5,"nodeType":"304","endLine":36,"endColumn":7,"suggestions":"336"},{"ruleId":"306","severity":1,"message":"307","line":42,"column":9,"nodeType":"308","messageId":"309","endLine":42,"endColumn":11},{"ruleId":"285","severity":1,"message":"337","line":3,"column":23,"nodeType":"287","messageId":"288","endLine":3,"endColumn":34},{"ruleId":"285","severity":1,"message":"323","line":1,"column":28,"nodeType":"287","messageId":"288","endLine":1,"endColumn":36},{"ruleId":"302","severity":1,"message":"338","line":41,"column":8,"nodeType":"304","endLine":41,"endColumn":10,"suggestions":"339"},{"ruleId":"285","severity":1,"message":"337","line":3,"column":23,"nodeType":"287","messageId":"288","endLine":3,"endColumn":34},{"ruleId":"285","severity":1,"message":"323","line":1,"column":28,"nodeType":"287","messageId":"288","endLine":1,"endColumn":36},{"ruleId":"302","severity":1,"message":"340","line":41,"column":8,"nodeType":"304","endLine":41,"endColumn":10,"suggestions":"341"},{"ruleId":"285","severity":1,"message":"342","line":4,"column":28,"nodeType":"287","messageId":"288","endLine":4,"endColumn":36},{"ruleId":"285","severity":1,"message":"343","line":4,"column":54,"nodeType":"287","messageId":"288","endLine":4,"endColumn":59},{"ruleId":"285","severity":1,"message":"344","line":4,"column":61,"nodeType":"287","messageId":"288","endLine":4,"endColumn":71},{"ruleId":"306","severity":1,"message":"345","line":37,"column":25,"nodeType":"346","messageId":"347","endLine":37,"endColumn":34},{"ruleId":"285","severity":1,"message":"348","line":58,"column":11,"nodeType":"287","messageId":"288","endLine":58,"endColumn":18},{"ruleId":"349","severity":1,"message":"350","line":72,"column":17,"nodeType":"351","endLine":76,"endColumn":19},{"ruleId":"285","severity":1,"message":"352","line":128,"column":13,"nodeType":"287","messageId":"288","endLine":128,"endColumn":25},{"ruleId":"285","severity":1,"message":"353","line":128,"column":45,"nodeType":"287","messageId":"288","endLine":128,"endColumn":59},{"ruleId":"285","severity":1,"message":"354","line":6,"column":11,"nodeType":"287","messageId":"288","endLine":6,"endColumn":20},{"ruleId":"285","severity":1,"message":"355","line":7,"column":11,"nodeType":"287","messageId":"288","endLine":7,"endColumn":18},{"ruleId":"302","severity":1,"message":"303","line":22,"column":8,"nodeType":"304","endLine":22,"endColumn":10,"suggestions":"356"},"no-native-reassign",["357"],"no-negated-in-lhs",["358"],"no-unused-vars","'Graficas' is defined but never used.","Identifier","unusedVar","'IncidentesCasillas' is defined but never used.","'ReportesRgs' is defined but never used.","'res' is assigned a value but never used.","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'Component' is defined but never used.","'Thermometer' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["359"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'dispatch' and 'persona'. Either include them or remove the dependency array.",["360"],"'MenuButtonListCpt' is defined but never used.","'modelo' is assigned a value but never used.",["361"],"no-unreachable","Unreachable code.","VariableDeclaration","unreachableCode","ReturnStatement",["362"],"React Hook useEffect has missing dependencies: 'casilla' and 'dispatch'. Either include them or remove the dependency array.",["363"],"'useState' is defined but never used.","'updateVotoAccion' is defined but never used.",["364"],["365"],"React Hook useEffect has missing dependencies: 'dispatch' and 'eleccion'. Either include them or remove the dependency array.",["366"],"'Fragment' is defined but never used.","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'Grid' is defined but never used.","'loginRedux' is assigned a value but never used.","'reload' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'id', and 'persona'. Either include them or remove the dependency array.",["367"],"'useSelector' is defined but never used.","React Hook useEffect has missing dependencies: 'casilla', 'dispatch', and 'id'. Either include them or remove the dependency array.",["368"],"React Hook useEffect has missing dependencies: 'dispatch', 'eleccion', and 'id'. Either include them or remove the dependency array.",["369"],"'BarChart' is defined but never used.","'Error' is defined but never used.","'FindInPage' is defined but never used.","Array.prototype.map() expects a value to be returned at the end of function.","FunctionExpression","expectedAtEnd","'classes' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'basicOptions' is assigned a value but never used.","'stackedOptions' is assigned a value but never used.","'novotados' is assigned a value but never used.","'votados' is assigned a value but never used.",["370"],"no-global-assign","no-unsafe-negation",{"desc":"371","fix":"372"},{"desc":"373","fix":"374"},{"desc":"373","fix":"375"},{"desc":"371","fix":"376"},{"desc":"377","fix":"378"},{"desc":"373","fix":"379"},{"desc":"371","fix":"380"},{"desc":"381","fix":"382"},{"desc":"383","fix":"384"},{"desc":"385","fix":"386"},{"desc":"387","fix":"388"},{"desc":"371","fix":"389"},"Update the dependencies array to be: [dispatch]",{"range":"390","text":"391"},"Update the dependencies array to be: [dispatch, persona]",{"range":"392","text":"393"},{"range":"394","text":"393"},{"range":"395","text":"391"},"Update the dependencies array to be: [casilla, dispatch]",{"range":"396","text":"397"},{"range":"398","text":"393"},{"range":"399","text":"391"},"Update the dependencies array to be: [dispatch, eleccion]",{"range":"400","text":"401"},"Update the dependencies array to be: [dispatch, id, persona]",{"range":"402","text":"403"},"Update the dependencies array to be: [casilla, dispatch, id]",{"range":"404","text":"405"},"Update the dependencies array to be: [dispatch, eleccion, id]",{"range":"406","text":"407"},{"range":"408","text":"391"},[2382,2384],"[dispatch]",[1080,1082],"[dispatch, persona]",[1495,1497],[1667,1669],[1328,1330],"[casilla, dispatch]",[1521,1523],[4054,4056],[1228,1230],"[dispatch, eleccion]",[1029,1031],"[dispatch, id, persona]",[1174,1176],"[casilla, dispatch, id]",[1198,1200],"[dispatch, eleccion, id]",[733,735]]