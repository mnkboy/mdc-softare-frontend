import React, { Fragment, useState, useEffect } from 'react';
import { useDispatch, useSelector } from "react-redux";
import Avatar from '@material-ui/core/Avatar';
import Button from '@material-ui/core/Button';
import CssBaseline from '@material-ui/core/CssBaseline';
import TextField from '@material-ui/core/TextField';
import Link from '@material-ui/core/Link';
import Box from '@material-ui/core/Box';
import LockOutlinedIcon from '@material-ui/icons/LockOutlined';
import Typography from '@material-ui/core/Typography';
import { makeStyles } from '@material-ui/core/styles';
import Container from '@material-ui/core/Container';
import { getLoginAccion } from "../../redux/LoginDucks";
import { useForm } from 'react-hook-form'
import Snackbar from '@material-ui/core/Snackbar';
import MuiAlert from '@material-ui/lab/Alert';


function Alert(props) {
    return <MuiAlert elevation={6} variant="filled" {...props} />;
}

function Copyright() {
    return (
        <Typography variant="body2" color="textSecondary" align="center">
            {'Copyright Â© '}
            <Link color="inherit" href="https://material-ui.com/">
                Centinela Software
      </Link>{' '}
            {new Date().getFullYear()}
            {'.'}
        </Typography>
    );
}

const useStyles = makeStyles((theme) => ({
    paper: {
        marginTop: theme.spacing(8),
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
    },
    avatar: {
        margin: theme.spacing(1),
        backgroundColor: theme.palette.secondary.main,
    },
    form: {
        width: '100%', // Fix IE 11 issue.
        marginTop: theme.spacing(1),
    },
    submit: {
        margin: theme.spacing(3, 0, 2),
    },
    root: {
        width: '100%',
        '& > * + *': {
            marginTop: theme.spacing(2),
        },
    },
}));

export default function SignIn() {
    //Store y configuracion REDUX
    const dispatch = useDispatch();
    const token = useSelector((store) => store.login.array);
    const mensaje = useSelector((store) => store.login.mensaje);
    const error = useSelector((store) => store.login.error);

    //Mensajes y alertas
    const [alertMessage, setAlertMessage] = useState("Hola tarolas como estas");
    const [severity, setSeverity] = useState("")
    const [open, setOpen] = React.useState(false);

    const handleClick = () => {
        setOpen(true);
    };

    const handleErrorMessage = (strMessage) => {
        setAlertMessage(strMessage)
        setSeverity("error")
        handleClick();
    }

    const handleClose = (event, reason) => {
        if (reason === 'clickaway') {
            return;
        }
        setOpen(false);
    };

    //Estilos
    const classes = useStyles();

    //react-hook-forms
    const { register, errors, handleSubmit } = useForm();

    //HandleClick
    const onSubmit = (data) => {
        callLogin(data)
        console.log("token: " + token)
        console.log("mensaje: " + mensaje)
        console.log("error: " + error)

    }

    function funcverify() {
        console.log("token: " + token)
        console.log("mensaje: " + mensaje)
        console.log("error: " + error)
    }

    //Funciones mensajes
    function asyncLogin1(data) {
        return new Promise((resolve, reject) => {
            //here our function should be implemented 
            dispatch(getLoginAccion(data));
            resolve();
        });
    }
    function asyncLogin2() {
        return new Promise((resolve, reject) => {
            //here our function should be implemented 
            console.log("token: " + token)
            console.log("mensaje: " + mensaje)
            console.log("error: " + error)
            if (error) {
                handleErrorMessage(mensaje.CustomMessage)
            }
            resolve();
        });
    }

    function asyncLogin3() {
        return new Promise((resolve, reject) => {
            //here our function should be implemented 
            setTimeout(() => {
                console.log("Hello from inside the testAsync function 3");
                resolve();
            }, 500
            );
        });
    }

    async function callLogin(data) {
        console.log("Caller");
        await asyncLogin1(data);
        console.log("After waiting");
    }

    return (
        <Container component="main" maxWidth="xs">
            <CssBaseline />
            <div className={classes.paper}>
                <Avatar className={classes.avatar}>
                    <LockOutlinedIcon />
                </Avatar>
                <Typography component="h1" variant="h5">
                    Identificate
        </Typography>
                <form className={classes.form} onSubmit={handleSubmit(onSubmit)} noValidate autoComplete="off">
                    <h6><span className="text-danger text-small d-block mb-2">{errors?.usuario?.mensaje}</span></h6>
                    <TextField inputRef={register({ required: { value: true, mensaje: 'Usuario requerido' } })}
                        variant="outlined"
                        margin="normal"
                        required
                        fullWidth
                        id="usuario"
                        label="Usuario"
                        name="usuario"
                        autoComplete="usuario"
                        autoFocus
                    />
                    <h6><span className="text-danger text-small d-block mb-2">{errors?.password?.mensaje}</span></h6>
                    <TextField inputRef={register({ required: { value: true, mensaje: 'Password requerido' } })}
                        variant="outlined"
                        margin="normal"
                        required
                        fullWidth
                        name="password"
                        label="Password"
                        type="password"
                        id="password"
                        autoComplete="current-password"
                    />
                    {/* <FormControlLabel
                        control={<Checkbox value="remember" color="primary" />}
                        label="Remember me"
                    /> */}
                    <Button
                        type="submit"
                        fullWidth
                        variant="contained"
                        color="primary"
                        className={classes.submit}
                    >
                        Acceder
          </Button>
                    {/* <Grid container>
                        <Grid item xs>
                            <Link href="#" variant="body2">
                                Forgot password?
              </Link>
                        </Grid>
                        <Grid item>
                            <Link href="#" variant="body2">
                                {"Don't have an account? Sign Up"}
                            </Link>
                        </Grid>
                    </Grid> */}
                </form>
            </div>
            <div className={classes.root}>
                <Snackbar open={open} autoHideDuration={3000} onClose={handleClose}>
                    <Alert onClose={handleClose} severity={severity}>
                        {alertMessage}
                    </Alert>
                </Snackbar>
            </div>
            <Box mt={8}>
                <Copyright />
            </Box>
        </Container>
    );
}